[{"body_html":"<p>If you&#39;re running into errors like <code>can&#39;t find magick-config</code> or <code>can&#39;t find MagickWand.h</code> then you are probably missing some development dependencies. Assuming you already have Ruby installed...</p>\n<div class=\"highlight\"><pre><span class=\"nv\">$ </span>sudo apt-get install libmagickcore-dev libmagickwand-dev\n<span class=\"nv\">$ </span>gem install rmagick\n</pre></div>\n","body_markdown":"If you're running into errors like `can't find magick-config` or `can't find MagickWand.h` then you are probably missing some development dependencies. Assuming you already have Ruby installed...\r\n\r\n```bash\r\n$ sudo apt-get install libmagickcore-dev libmagickwand-dev\r\n$ gem install rmagick\r\n```\r\n\r\n","created_at":"2013-05-28T20:57:28Z","excerpt":"If you're running into errors like `can't find magick-config` or `can't find MagickWand.h` then you are probably missing some development dependencies.","id":29,"published":true,"published_on":"2013-05-28","title":"How to install the RMagick gem on a Raspberry Pi","updated_at":"2013-05-28T20:57:28Z"},{"body_html":"<p>Need to create a Rails engine which uses RSpec instead of Test::Unit and FactoryGirl instead of fixtures? Here are the steps:</p>\n\n<h3>1. Create the engine:</h3>\n<div class=\"highlight\"><pre>rails plugin new gem_name -T --mountable --full --dummy-path=spec/test_app\n</pre></div>\n\n<ul>\n<li>-T tells the generator to skip Test::Unit</li>\n<li>--mountable tells the generator that you want a namespaced engine</li>\n<li>--full tells the generator that you want app and config directories</li>\n<li>--dummy-path is the rails app that is generated for your tests. It&#39;s called test/dummy by default, but I never liked calling it that.</li>\n</ul>\n\n<h3>2. Add <code>rails-rspec</code> and <code>factory_girl_rails</code> as a dependencies in your Gemfile:</h3>\n<div class=\"highlight\"><pre><span class=\"n\">source</span> <span class=\"s2\">&quot;http://rubygems.org&quot;</span>\n<span class=\"n\">gemspec</span>\n<span class=\"n\">gem</span> <span class=\"s2\">&quot;rspec-rails&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 2.12.2&quot;</span>\n<span class=\"n\">gem</span> <span class=\"s2\">&quot;factory_girl_rails&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 4.0&quot;</span>\n</pre></div>\n\n<p>Then <code>bundle install</code>.</p>\n\n<h3>3. Now edit your engine&#39;s lib/gem_name/engine.rb file to include rspec:</h3>\n<div class=\"highlight\"><pre><span class=\"k\">module</span> <span class=\"nn\">GemName</span>\n  <span class=\"k\">class</span> <span class=\"nc\">Engine</span> <span class=\"o\">&lt;</span> <span class=\"o\">::</span><span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Engine</span>\n    <span class=\"n\">isolate_namespace</span> <span class=\"no\">GemName</span>\n\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">generators</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">g</span><span class=\"o\">|</span>\n      <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">test_framework</span> <span class=\"ss\">:rspec</span>\n      <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">fixture_replacement</span> <span class=\"ss\">:factory_girl</span><span class=\"p\">,</span> <span class=\"ss\">:dir</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;spec/factories&#39;</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n<h3>4. Run the rspec generator:</h3>\n<div class=\"highlight\"><pre>rails generate rspec:install\n</pre></div>\n\n<h3>5. After creating some models and migrations, run the migrations for the test app and the test database:</h3>\n<div class=\"highlight\"><pre>bundle exec rake app:db:migrate\nbundle exec rake app:db:test:prepare\n</pre></div>\n\n<p>Now you have a Rails engine configured to use RSpec. You&#39;re ready to start testing!</p>\n","body_markdown":"Need to create a Rails engine which uses RSpec instead of Test::Unit and FactoryGirl instead of fixtures? Here are the steps:\r\n\r\n### 1. Create the engine:\r\n\r\n```text\r\nrails plugin new gem_name -T --mountable --full --dummy-path=spec/test_app\r\n```\r\n* -T tells the generator to skip Test::Unit\r\n* --mountable tells the generator that you want a namespaced engine\r\n* --full tells the generator that you want app and config directories\r\n* --dummy-path is the rails app that is generated for your tests. It's called test/dummy by default, but I never liked calling it that.\r\n\r\n### 2. Add `rails-rspec` and `factory_girl_rails` as a dependencies in your Gemfile:\r\n\r\n```ruby\r\nsource \"http://rubygems.org\"\r\ngemspec\r\ngem \"rspec-rails\", \"~> 2.12.2\"\r\ngem \"factory_girl_rails\", \"~> 4.0\"\r\n```\r\n\r\nThen `bundle install`.\r\n\r\n### 3. Now edit your engine's lib/gem_name/engine.rb file to include rspec:\r\n\r\n```ruby\r\nmodule GemName\r\n  class Engine < ::Rails::Engine\r\n    isolate_namespace GemName\r\n\r\n    config.generators do |g|\r\n      g.test_framework :rspec\r\n      g.fixture_replacement :factory_girl, :dir => 'spec/factories'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### 4. Run the rspec generator:\r\n\r\n```text\r\nrails generate rspec:install\r\n```\r\n\r\n### 5. After creating some models and migrations, run the migrations for the test app and the test database:\r\n\r\n```text\r\nbundle exec rake app:db:migrate\r\nbundle exec rake app:db:test:prepare\r\n```\r\n\r\nNow you have a Rails engine configured to use RSpec. You're ready to start testing!","created_at":"2013-04-15T20:50:56Z","excerpt":"An example of how to generate a Rails engine which is configured to use RSpec for testing.","id":27,"published":true,"published_on":"2013-04-15","title":"How to create a new Rails engine which uses RSpec and FactoryGirl for testing","updated_at":"2013-04-16T20:32:50Z"},{"body_html":"<p>I find myself needing to find my local and external IP addresses rather often, so I created a few command line helpers to do this for me. Just add this to your <code>~/.bash_profile</code>:</p>\n<div class=\"highlight\"><pre><span class=\"k\">function </span>externalip <span class=\"o\">()</span> <span class=\"o\">{</span> curl http://ipecho.net/plain; <span class=\"nb\">echo</span>; <span class=\"o\">}</span>\n<span class=\"k\">function </span>internalip <span class=\"o\">{</span> /sbin/ifconfig | grep inet | awk <span class=\"s1\">&#39;{ if ( $1 == &quot;inet&quot; ) { print $2 } else if ( $2 == &quot;Link&quot; ) { printf &quot;%s:&quot; ,$1 } }&#39;</span> | grep -v 127.0.0.1; <span class=\"o\">}</span>\n</pre></div>\n\n<p>Now you can find your internal and external IP addresses from the command line by typing <code>externalip</code> or <code>internalip</code>.</p>\n","body_markdown":"I find myself needing to find my local and external IP addresses rather often, so I created a few command line helpers to do this for me. Just add this to your `~/.bash_profile`:\r\n\r\n```bash\r\nfunction externalip () { curl http://ipecho.net/plain; echo; }\r\nfunction internalip { /sbin/ifconfig | grep inet | awk '{ if ( $1 == \"inet\" ) { print $2 } else if ( $2 == \"Link\" ) { printf \"%s:\" ,$1 } }' | grep -v 127.0.0.1; }\r\n```\r\n\r\nNow you can find your internal and external IP addresses from the command line by typing `externalip` or `internalip`.","created_at":"2013-01-24T20:08:49Z","excerpt":"","id":26,"published":true,"published_on":"2013-01-24","title":"How to display internal and external IP address from command line","updated_at":"2013-01-24T20:08:49Z"},{"body_html":"<p>Are you getting an error that looks like this?</p>\n<div class=\"highlight\"><pre>[2013-01-21T19:24:34+01:00] INFO: Processing package[apache2] action install (apache2::default line 20)\n\n================================================================================\nError executing action `install` on resource &#39;package[apache2]&#39;\n================================================================================\n\nChef::Exceptions::Exec\n----------------------\napt-get -q -y install apache2=2.2.14-5ubuntu8.9 returned 100, expected 0\n\nResource Declaration:\n---------------------\n# In /tmp/vagrant-chef-1/chef-solo-1/cookbooks/apache2/recipes/default.rb\n\n 19: \n 20: package &quot;apache2&quot; do\n 21:   package_name node[&#39;apache&#39;][&#39;package&#39;]\n 22: end\n 23: \n</pre></div>\n\n<p>Make sure you include the <a href=\"https://github.com/opscode-cookbooks/apt\">apt recipe</a> before this. It performs an apt-get update which will fix this problem.</p>\n","body_markdown":"Are you getting an error that looks like this?\r\n\r\n```text\r\n[2013-01-21T19:24:34+01:00] INFO: Processing package[apache2] action install (apache2::default line 20)\r\n\r\n================================================================================\r\nError executing action `install` on resource 'package[apache2]'\r\n================================================================================\r\n\r\nChef::Exceptions::Exec\r\n----------------------\r\napt-get -q -y install apache2=2.2.14-5ubuntu8.9 returned 100, expected 0\r\n\r\nResource Declaration:\r\n---------------------\r\n# In /tmp/vagrant-chef-1/chef-solo-1/cookbooks/apache2/recipes/default.rb\r\n\r\n 19: \r\n 20: package \"apache2\" do\r\n 21:   package_name node['apache']['package']\r\n 22: end\r\n 23: \r\n```\r\nMake sure you include the [apt recipe](https://github.com/opscode-cookbooks/apt) before this. It performs an apt-get update which will fix this problem.","created_at":"2013-01-22T00:10:23Z","excerpt":"","id":25,"published":true,"published_on":"2013-01-22","title":"Fixing Vagrant Chef Apache2 install errors","updated_at":"2013-01-22T00:12:06Z"},{"body_html":"<p>I recently needed to upgrade a legacy Rails app to take advantage of the latest security fixes. It turned out to be more work than I was expecting, so hopefully this will help you save a little time.</p>\n\n<p>The environment prior to upgrade:</p>\n\n<ul>\n<li>rails 2.3.2</li>\n<li>ruby 1.8.6</li>\n<li>rack 1.1.5</li>\n<li>rubygems 1.3.1</li>\n<li>mongrel 1.1.5</li>\n<li>nginx</li>\n</ul>\n\n<p>I hade one console tab open tailing the mongrel log at all times so I could see when something broke. Having not worked with a mongrel rails app, I didn&#39;t know where I would find the log, but it was in the app&#39;s log directory (of course).</p>\n\n<p>The first step was to install the Rails gem:</p>\n<div class=\"highlight\"><pre><span class=\"go\">sudo gem install rails -v 2.3.15</span>\n</pre></div>\n\n<p>If you see these messages, just ignore them because they don&#39;t cause an error:</p>\n<div class=\"highlight\"><pre>config.load_paths is deprecated and removed in Rails 3, please use autoload_paths instead\n</pre></div>\n\n<p>Next, update rails version in <code>config/environment.rb</code>:</p>\n<div class=\"highlight\"><pre><span class=\"no\">RAILS_GEM_VERSION</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2.3.15&#39;</span> <span class=\"k\">unless</span> <span class=\"n\">defined?</span> <span class=\"no\">RAILS_GEM_VERSION</span>\n</pre></div>\n\n<h3>Vendored Gems</h3>\n\n<p>If your app has a vendored version of rails, remove it because we&#39;re going to use the one we just installed:</p>\n<div class=\"highlight\"><pre><span class=\"go\">rm -rf vendor/rails</span>\n</pre></div>\n\n<p>If you have any files (non-directories) in <code>vendor/gems</code>, remove those too:</p>\n<div class=\"highlight\"><pre><span class=\"go\"> rm vendor/gems/init.rb</span>\n</pre></div>\n\n<p>If you have any errors in the log about your vendored gems missing .specification files, make sure the gem is installed with ruby gems first, then use the rake task to create the specs:</p>\n<div class=\"highlight\"><pre><span class=\"go\">rake gems:refresh_specs</span>\n</pre></div>\n\n<h3>Rake</h3>\n\n<p>If you have any rake errors, you will see the message of what you need to fix.</p>\n\n<h3>RubyGems</h3>\n\n<p>You might have seen this error before upgrading Rails:</p>\n<div class=\"highlight\"><pre>Warning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement\n</pre></div>\n\n<p>And if you see this error after upgrading Rails...</p>\n<div class=\"highlight\"><pre>/usr/lib/ruby/gems/1.8/gems/rails-2.3.15/lib/rails/gem_dependency.rb:81:in `add_load_paths&#39;: undefined method `requirement&#39; for #&lt;Rails::GemDependency:0xb71d178c&gt; (NoMethodError)\n</pre></div>\n\n<p>...you will need a newer version of rubygems:</p>\n<div class=\"highlight\"><pre><span class=\"go\">sudo gem install rubygems-update -v=&#39;1.4.2&#39;</span>\n<span class=\"go\">sudo update_rubygems</span>\n</pre></div>\n\n<h3>Mongrel</h3>\n\n<p>If you are using mongrel and come across this error:</p>\n<div class=\"highlight\"><pre>Error calling Dispatcher.dispatch #&lt;NoMethodError: private method `split&#39; called for nil:NilClass&gt;\n</pre></div>\n\n<p>...there is a <a href=\"https://gist.github.com/826692\">patch</a> to fix this. Create an initializer in your Rails app called <code>mongrel.rb</code> and paste this in:</p>\n<div class=\"highlight\"><pre>  <span class=\"k\">module</span> <span class=\"nn\">Rack</span>\n    <span class=\"k\">module</span> <span class=\"nn\">Utils</span>\n      <span class=\"k\">class</span> <span class=\"nc\">HeaderHash</span> <span class=\"o\">&lt;</span> <span class=\"no\">Hash</span>\n        <span class=\"k\">def</span> <span class=\"nf\">[]</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n          <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"vi\">@names</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"vi\">@names</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span>\n          <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"vi\">@names</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">downcase</span><span class=\"o\">]</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">class</span> <span class=\"nc\">Mongrel</span><span class=\"o\">::</span><span class=\"no\">CGIWrapper</span>\n    <span class=\"k\">def</span> <span class=\"nf\">header_with_rails_fix</span><span class=\"p\">(</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;text/html&#39;</span><span class=\"p\">)</span>\n      <span class=\"vi\">@head</span><span class=\"o\">[</span><span class=\"s1\">&#39;cookie&#39;</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">&#39;cookie&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sr\">/^\\n/</span><span class=\"p\">,</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span> <span class=\"p\">}</span> <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">class</span> <span class=\"o\">!=</span> <span class=\"nb\">String</span> <span class=\"ow\">and</span> <span class=\"n\">options</span><span class=\"o\">[</span><span class=\"s1\">&#39;cookie&#39;</span><span class=\"o\">]</span>\n      <span class=\"n\">header_without_rails_fix</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">alias_method_chain</span> <span class=\"ss\">:header</span><span class=\"p\">,</span> <span class=\"ss\">:rails_fix</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">module</span> <span class=\"nn\">ActionController</span>\n    <span class=\"k\">class</span> <span class=\"nc\">CGIHandler</span>\n      <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">dispatch_cgi</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">cgi</span><span class=\"p\">,</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"vg\">$stdout</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">cgi</span><span class=\"o\">.</span><span class=\"n\">__send__</span><span class=\"p\">(</span><span class=\"ss\">:env_table</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"s2\">&quot;HTTP_CONTENT_LENGTH&quot;</span>\n        <span class=\"n\">cgi</span><span class=\"o\">.</span><span class=\"n\">stdinput</span><span class=\"o\">.</span><span class=\"n\">extend</span> <span class=\"no\">ProperStream</span>\n        <span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;SCRIPT_NAME&quot;</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;SCRIPT_NAME&quot;</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;/&quot;</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n          <span class=\"s2\">&quot;rack.version&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;rack.input&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"n\">cgi</span><span class=\"o\">.</span><span class=\"n\">stdinput</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;rack.errors&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"vg\">$stderr</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;rack.multithread&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">false</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;rack.multiprocess&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;rack.run_once&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">false</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;rack.url_scheme&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"s2\">&quot;yes&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;on&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"o\">].</span><span class=\"n\">include?</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;HTTPS&quot;</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"s2\">&quot;https&quot;</span> <span class=\"p\">:</span> <span class=\"s2\">&quot;http&quot;</span>\n        <span class=\"p\">})</span>\n        <span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;QUERY_STRING&quot;</span><span class=\"o\">]</span> <span class=\"o\">||=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;HTTP_VERSION&quot;</span><span class=\"o\">]</span> <span class=\"o\">||=</span> <span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;SERVER_PROTOCOL&quot;</span><span class=\"o\">]</span>\n        <span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;REQUEST_PATH&quot;</span><span class=\"o\">]</span> <span class=\"o\">||=</span> <span class=\"s2\">&quot;/&quot;</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"s2\">&quot;PATH_INFO&quot;</span> <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">&quot;PATH_INFO&quot;</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">binmode</span> <span class=\"k\">if</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">respond_to?</span><span class=\"p\">(</span><span class=\"ss\">:binmode</span><span class=\"p\">)</span>\n          <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">sync</span> <span class=\"o\">=</span> <span class=\"kp\">false</span> <span class=\"k\">if</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">respond_to?</span><span class=\"p\">(</span><span class=\"ss\">:sync</span><span class=\"o\">=</span><span class=\"p\">)</span>\n          <span class=\"n\">headers</span><span class=\"o\">[</span><span class=\"s1\">&#39;Status&#39;</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">to_s</span>\n          <span class=\"k\">if</span> <span class=\"n\">headers</span><span class=\"o\">[</span><span class=\"s1\">&#39;Set-Cookie&#39;</span><span class=\"o\">]</span>\n            <span class=\"n\">headers</span><span class=\"o\">[</span><span class=\"s1\">&#39;cookie&#39;</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">&#39;Set-Cookie&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n          <span class=\"k\">end</span>\n          <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">cgi</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"p\">))</span>\n          <span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">each</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">part</span><span class=\"o\">|</span>\n            <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">write</span> <span class=\"n\">part</span>\n            <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">flush</span> <span class=\"k\">if</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">respond_to?</span><span class=\"p\">(</span><span class=\"ss\">:flush</span><span class=\"p\">)</span>\n          <span class=\"p\">}</span>\n        <span class=\"k\">ensure</span>\n          <span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">close</span> <span class=\"k\">if</span> <span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">respond_to?</span><span class=\"p\">(</span><span class=\"ss\">:close</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n</pre></div>\n\n<h3>Active Merchant</h3>\n\n<p>Do you need to update <a href=\"https://groups.google.com/d/msg/activemerchant/LSbI0uEaf0I/OThWdddFTtwJ\">Active Merchant to a version compatible with Ruby 1.8.6 and Rails 2.3.15</a>?</p>\n<div class=\"highlight\"><pre><span class=\"go\">gem install activemerchant -v 1.12.0</span>\n</pre></div>\n\n<p>And hopefully, at this point, your Rails upgrade is up and running again!</p>\n","body_markdown":"I recently needed to upgrade a legacy Rails app to take advantage of the latest security fixes. It turned out to be more work than I was expecting, so hopefully this will help you save a little time.\r\n\r\nThe environment prior to upgrade:\r\n\r\n - rails 2.3.2\r\n - ruby 1.8.6\r\n - rack 1.1.5\r\n - rubygems 1.3.1\r\n - mongrel 1.1.5\r\n - nginx\r\n\r\nI hade one console tab open tailing the mongrel log at all times so I could see when something broke. Having not worked with a mongrel rails app, I didn't know where I would find the log, but it was in the app's log directory (of course).\r\n\r\nThe first step was to install the Rails gem:\r\n\r\n```console\r\nsudo gem install rails -v 2.3.15\r\n```\r\n\r\nIf you see these messages, just ignore them because they don't cause an error:\r\n\r\n```text\r\nconfig.load_paths is deprecated and removed in Rails 3, please use autoload_paths instead\r\n```\r\n\r\nNext, update rails version in `config/environment.rb`:\r\n\r\n```ruby\r\nRAILS_GEM_VERSION = '2.3.15' unless defined? RAILS_GEM_VERSION\r\n```\r\n\r\n### Vendored Gems\r\nIf your app has a vendored version of rails, remove it because we're going to use the one we just installed:\r\n\r\n```console\r\nrm -rf vendor/rails\r\n```\r\n\r\nIf you have any files (non-directories) in `vendor/gems`, remove those too:\r\n\r\n```console\r\n rm vendor/gems/init.rb\r\n```\r\n\r\nIf you have any errors in the log about your vendored gems missing .specification files, make sure the gem is installed with ruby gems first, then use the rake task to create the specs:\r\n\r\n```console\r\nrake gems:refresh_specs\r\n```\r\n\r\n### Rake\r\n\r\nIf you have any rake errors, you will see the message of what you need to fix.\r\n\r\n### RubyGems\r\n\r\nYou might have seen this error before upgrading Rails:\r\n\r\n```text\r\nWarning: Gem::Dependency#version_requirements is deprecated and will be removed on or after August 2010.  Use #requirement\r\n```\r\n\r\nAnd if you see this error after upgrading Rails...\r\n\r\n```text\r\n/usr/lib/ruby/gems/1.8/gems/rails-2.3.15/lib/rails/gem_dependency.rb:81:in `add_load_paths': undefined method `requirement' for #<Rails::GemDependency:0xb71d178c> (NoMethodError)\r\n```\r\n\r\n...you will need a newer version of rubygems:\r\n\r\n```console\r\nsudo gem install rubygems-update -v='1.4.2'\r\nsudo update_rubygems\r\n```\r\n\r\n### Mongrel\r\n\r\nIf you are using mongrel and come across this error:\r\n\r\n```text\r\nError calling Dispatcher.dispatch #<NoMethodError: private method `split' called for nil:NilClass>\r\n```\r\n\r\n...there is a [patch](https://gist.github.com/826692) to fix this. Create an initializer in your Rails app called `mongrel.rb` and paste this in:\r\n\r\n```ruby\r\n  module Rack\r\n    module Utils\r\n      class HeaderHash < Hash\r\n        def [](k)\r\n          super(@names[k]) if @names[k]\r\n          super(@names[k.downcase])\r\n        end\r\n      end\r\n    end\r\n  end\r\n  \r\n  class Mongrel::CGIWrapper\r\n    def header_with_rails_fix(options = 'text/html')\r\n      @head['cookie'] = options.delete('cookie').flatten.map { |v| v.sub(/^\\n/,'') } if options.class != String and options['cookie']\r\n      header_without_rails_fix(options)\r\n    end\r\n    alias_method_chain :header, :rails_fix\r\n  end\r\n  \r\n  module ActionController\r\n    class CGIHandler\r\n      def self.dispatch_cgi(app, cgi, out = $stdout)\r\n        env = cgi.__send__(:env_table)\r\n        env.delete \"HTTP_CONTENT_LENGTH\"\r\n        cgi.stdinput.extend ProperStream\r\n        env[\"SCRIPT_NAME\"] = \"\" if env[\"SCRIPT_NAME\"] == \"/\"\r\n        env.update({\r\n          \"rack.version\" => [0,1],\r\n          \"rack.input\" => cgi.stdinput,\r\n          \"rack.errors\" => $stderr,\r\n          \"rack.multithread\" => false,\r\n          \"rack.multiprocess\" => true,\r\n          \"rack.run_once\" => false,\r\n          \"rack.url_scheme\" => [\"yes\", \"on\", \"1\"].include?(env[\"HTTPS\"]) ? \"https\" : \"http\"\r\n        })\r\n        env[\"QUERY_STRING\"] ||= \"\"\r\n        env[\"HTTP_VERSION\"] ||= env[\"SERVER_PROTOCOL\"]\r\n        env[\"REQUEST_PATH\"] ||= \"/\"\r\n        env.delete \"PATH_INFO\" if env[\"PATH_INFO\"] == \"\"\r\n        status, headers, body = app.call(env)\r\n        begin\r\n          out.binmode if out.respond_to?(:binmode)\r\n          out.sync = false if out.respond_to?(:sync=)\r\n          headers['Status'] = status.to_s\r\n          if headers['Set-Cookie']\r\n            headers['cookie'] = headers.delete('Set-Cookie').split(\"\\n\")\r\n          end\r\n          out.write(cgi.header(headers))\r\n          body.each { |part|\r\n            out.write part\r\n            out.flush if out.respond_to?(:flush)\r\n          }\r\n        ensure\r\n          body.close if body.respond_to?(:close)\r\n        end\r\n      end\r\n    end\r\n  end\r\n```\r\n\r\n### Active Merchant\r\nDo you need to update [Active Merchant to a version compatible with Ruby 1.8.6 and Rails 2.3.15](https://groups.google.com/d/msg/activemerchant/LSbI0uEaf0I/OThWdddFTtwJ)?\r\n\r\n```console\r\ngem install activemerchant -v 1.12.0\r\n```\r\n\r\n\r\n\r\nAnd hopefully, at this point, your Rails upgrade is up and running again!","created_at":"2013-01-16T17:51:37Z","excerpt":"Need to upgrade a legacy Rails app to the latest security release? In this tutorial, I document my experience upgrading a legacy Rails 2.3.2 app to Rails 2.3.15","id":23,"published":true,"published_on":"2013-01-16","title":"How to upgrade a Rails 2.3.2 app to Rails 2.3.15","updated_at":"2013-01-18T01:06:57Z"},{"body_html":"<p>Need to render a different view script than the default? There are actually a few different ways to do it, depending on the situation. Given the following controller:</p>\n<div class=\"highlight\"><pre><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyController</span> <span class=\"k\">extends</span> <span class=\"nx\">Zend_Controller_Action</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"nf\">existingAction</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">view</span><span class=\"o\">-&gt;</span><span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;original&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"nf\">reuseExistingViewAction</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">view</span><span class=\"o\">-&gt;</span><span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<p>The options we have available are:</p>\n\n<ul>\n<li><code>$this-&gt;render(&#39;existing&#39;)</code></li>\n<li><code>$this-&gt;renderScript(&#39;my-controller/existing.phtml&#39;)</code></li>\n<li><code>$this-&gt;_helper-&gt;viewRenderer-&gt;setRender(&#39;existing&#39;);</code></li>\n<li><code>$this-&gt;_helper-&gt;viewRenderer(&#39;existing&#39;);</code> (calls the <code>setRender</code> method internally)</li>\n</ul>\n\n<p>However, each method acts differently. Let&#39;s see how they differ.</p>\n\n<h3>Using the controller&#39;s <code>render()</code> method:</h3>\n<div class=\"highlight\"><pre><span class=\"x\">public function reuseExistingViewAction()</span>\n<span class=\"x\">{</span>\n<span class=\"x\">    $this-&gt;render(&#39;existing&#39;); // renders immediately, so only useful if it&#39;s at the end of the function</span>\n<span class=\"x\">    $this-&gt;view-&gt;foo = &#39;bar&#39;; // this code is never added to the view ...</span>\n<span class=\"x\">}</span>\n</pre></div>\n\n<h3>Using the <code>ViewRenderer</code> helper:</h3>\n<div class=\"highlight\"><pre><span class=\"x\">public function reuseExistingViewAction()</span>\n<span class=\"x\">{</span>\n<span class=\"x\">    $this-&gt;_helper-&gt;viewRenderer(&#39;existing&#39;); // allows us to set early</span>\n<span class=\"x\">    $this-&gt;view-&gt;foo = &#39;bar&#39;; // works as expected</span>\n<span class=\"x\">}</span>\n</pre></div>\n","body_markdown":"Need to render a different view script than the default? There are actually a few different ways to do it, depending on the situation. Given the following controller:\r\n\r\n```php\r\n<?php\r\n\r\nclass MyController extends Zend_Controller_Action\r\n{\r\n    public function existingAction()\r\n    {\r\n        $this->view->foo = 'original';\r\n    }\r\n\r\n    public function reuseExistingViewAction()\r\n    {\r\n        $this->view->foo = 'bar';\r\n    }\r\n}\r\n```\r\n\r\nThe options we have available are:\r\n\r\n - `$this->render('existing')`\r\n - `$this->renderScript('my-controller/existing.phtml')`\r\n - `$this->_helper->viewRenderer->setRender('existing');`\r\n - `$this->_helper->viewRenderer('existing');` (calls the `setRender` method internally)\r\n\r\nHowever, each method acts differently. Let's see how they differ.\r\n\r\n### Using the controller's `render()` method:\r\n\r\n```php\r\npublic function reuseExistingViewAction()\r\n{\r\n    $this->render('existing'); // renders immediately, so only useful if it's at the end of the function\r\n    $this->view->foo = 'bar'; // this code is never added to the view ...\r\n}\r\n```\r\n\r\n### Using the `ViewRenderer` helper:\r\n\r\n```php\r\npublic function reuseExistingViewAction()\r\n{\r\n    $this->_helper->viewRenderer('existing'); // allows us to set early\r\n    $this->view->foo = 'bar'; // works as expected\r\n}\r\n```","created_at":"2012-10-04T18:58:42Z","excerpt":"","id":22,"published":true,"published_on":"2012-10-04","title":"Zend Framework: How to specify which view script a controller should render","updated_at":"2012-10-04T19:39:48Z"},{"body_html":"<p>If you&#39;re reading this, you&#39;ve probably heard the terms <strong>API</strong> and <strong>REST</strong> thrown around and you&#39;re starting to wonder what the fuss is all about. Maybe you already know a little bit, but don&#39;t know how to get started. In this guide, I will explain the basics of REST and how to get started building an API (including authentication) for your application.</p>\n\n<h2>What is an API?</h2>\n\n<p>The term API stands for Application Programming Interface. The term can be used to describe the features of a library, or how to interact with it. Your favorite library may have &quot;API Documentation&quot; which documents which functions are available, how you call them, which arguments are required, etc.</p>\n\n<p>However, these days, when people refer to an API they are most likely referring to an HTTP API, which can be a way of sharing application data over the internet. For example, Twitter has an API that allows you to request tweets in a format that makes it easy to import into your own application. This is the true power of HTTP APIs, being able to &quot;mashup&quot; data from multiple applications into your own hybrid application, or create an application which enhances the experience of using someone else&#39;s application.</p>\n\n<p>For example, let&#39;s say we have an application that allows you to view, create, edit, and delete widgets. We could create an HTTP API that allows you to perform these functions:</p>\n<div class=\"highlight\"><pre>http://example.com/view_widgets\nhttp://example.com/create_new_widget?name=Widgetizer\nhttp://example.com/update_widget?id=123&amp;name=Foo\nhttp://example.com/delete_widget?id=123\n</pre></div>\n\n<p>A problem has started to arise when everyone starts implementing their own APIs. Without a standard way of naming URLs, you always have to refer to the documentation to understand how the API works. One API might have a URL like <code>/view_widgets</code> whereas another API might use <code>/widgets/all</code>.</p>\n\n<p>Don&#39;t worry, REST comes to rescue us from this mess.</p>\n\n<h2>What is REST?</h2>\n\n<p>REST stands for <strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer. This is a term invented by Roy Fielding to describe a standard way of creating HTTP APIs. He noticed that the four common actions (view, create, edit, and delete) map directly to HTTP verbs that are already implemented: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>.</p>\n\n<p>If you&#39;re new to HTTP, you may not be familiar with some of these verbs. So let me give a brief rundown on HTTP methods.</p>\n\n<h2>HTTP methods</h2>\n\n<p>There are technically 8 different HTTP methods:</p>\n<div class=\"highlight\"><pre>GET\nPOST\nPUT\nDELETE\nOPTIONS\nHEAD\nTRACE\nCONNECT\n</pre></div>\n\n<p>Most of the time, when you&#39;re clicking around in your browser, you are only ever using the <code>GET</code> HTTP method. <code>GET</code> is used when you are &quot;getting&quot; a resource from the internet. When you submit a form, you are usually using the <code>POST</code> method to &quot;post data&quot; back to the website. As for the other methods, some browsers don&#39;t even implement them all. However, for our uses, that doesn&#39;t matter. What matters is that we have a bunch of &quot;verbs&quot; to choose from which help to describe the actions we are taking. We will be using client libraries which already know how to use the different HTTP methods.</p>\n\n<h2>Examples of REST</h2>\n\n<p>Let&#39;s look at a few examples of what makes an API &quot;RESTful&quot;. Using our widgets example again...</p>\n\n<p>If we wanted to view all widgets, the URL would look like this:</p>\n<div class=\"highlight\"><pre>GET http://example.com/widgets\n</pre></div>\n\n<p>Create a new widget by posting the data:</p>\n<div class=\"highlight\"><pre>POST http://example.com/widgets\nData:\n    name = Foobar\n</pre></div>\n\n<p>To view a single widget we &quot;get&quot; it by specifying that widget&#39;s id:</p>\n<div class=\"highlight\"><pre>GET http://example.com/widgets/123\n</pre></div>\n\n<p>Update that widget by &quot;putting&quot; the new data:</p>\n<div class=\"highlight\"><pre>PUT http://example.com/widgets/123\nData:\n    name = New name\n    color = blue\n</pre></div>\n\n<p>Delete that widget:</p>\n<div class=\"highlight\"><pre>DELETE http://example.com/widgets/123\n</pre></div>\n\n<h2>Anatomy of a REST URL</h2>\n\n<p>You might have noticed from the previous examples that REST URLs use a consistent naming scheme. When you are interacting with an API, you are almost always manipulating some sort of object. In our examples, this is a <code>Widget</code>. In REST terminology, this is called a <strong>Resource</strong>. The first part of the URL is always the plural form of the resource:</p>\n<div class=\"highlight\"><pre>/widgets\n</pre></div>\n\n<p>This is always used when referring to this collection of resources (&quot;list all&quot; and &quot;add one&quot; actions). When you are working with a specific resource, you add the ID to the URL.</p>\n<div class=\"highlight\"><pre>/widgets/123\n</pre></div>\n\n<p>This URL is used when you want to &quot;view&quot;, &quot;edit&quot;, or &quot;delete&quot; the particular resource.</p>\n\n<h2>Nested Resources</h2>\n\n<p>Let&#39;s say our <code>widgets</code> have many users associated with them. What would this URL structure look like?</p>\n\n<p>List all:</p>\n<div class=\"highlight\"><pre>GET /widgets/123/users\n</pre></div>\n\n<p>Add one:</p>\n<div class=\"highlight\"><pre>POST /widgets/123/users\nData:\n    name = Andrew\n</pre></div>\n\n<p>Nested resources are perfectly acceptable in URLs. However, it&#39;s not a best practice to go more than two levels deep. It&#39;s not necessary because you can simply refer to those nested resources by ID rather than nesting them within their parents. For example:</p>\n<div class=\"highlight\"><pre>/widgets/123/users/456/sports/789\n</pre></div>\n\n<p>...can be referenced as:</p>\n<div class=\"highlight\"><pre>/users/456/sports/789\n</pre></div>\n\n<p>...or even:</p>\n<div class=\"highlight\"><pre>/sports/789\n</pre></div>\n\n<h2>HTTP Status Codes</h2>\n\n<p>Another important part of REST is responding with the correct status code for the type of request that was made. If you&#39;re new to HTTP status codes, heres a quick summary. When you make an HTTP request, the server will respond with a code which corresponds to whether or not the request was successful and how the client should proceed. There are four different levels of codes:</p>\n\n<ul>\n<li>2xx = Success</li>\n<li>3xx = Redirect</li>\n<li>4xx = User error</li>\n<li>5xx = Server error</li>\n</ul>\n\n<p>Here&#39;s a list of the most important status codes:</p>\n\n<h3>Success codes:</h3>\n\n<ul>\n<li>200 - OK (the default)</li>\n<li>201 - Created</li>\n<li>202 - Accepted (often used for delete requests)</li>\n</ul>\n\n<h3>User error codes:</h3>\n\n<ul>\n<li>400 - Bad Request (generic user error/bad data)</li>\n<li>401 - Unauthorized (this area requires you to log in)</li>\n<li>404 - Not Found (bad URL)</li>\n<li>405 - Method Not Allowed (wrong HTTP method)</li>\n<li>409 - Conflict (i.e. trying to create the same resource with a PUT request)</li>\n</ul>\n\n<h2>API response formats</h2>\n\n<p>When you make an HTTP request, you can request the format that you want to receive. For example, making a request for a webpage, you want the format to be in HTML, or if you are downloading an image, the format returned should be an image. However, it&#39;s the server&#39;s responsibility to respond in the format that was requested.</p>\n\n<p>JSON has quickly become the format of choice for REST APIs. It has a lightweight, readable syntax that can be easily manipulated. So when a user of our API makes a request and specifies JSON as the format they would prefer:</p>\n<div class=\"highlight\"><pre>GET /widgets\nAccept: application/json\n</pre></div>\n\n<p>...our API will return an array of <code>widgets</code> formatted as JSON:</p>\n<div class=\"highlight\"><pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Simple Widget&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">456</span><span class=\"p\">,</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;My other widget&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n<p>If the user requests a format that we haven&#39;t implemented, what do we do? You can throw some type of error, but I would recommend enforcing JSON as your standard response format. It&#39;s the format that your developers will want to use. No reason to support other formats unless you already have an API which needs to be supported.</p>\n\n<h2>Building a REST API</h2>\n\n<p>Actually building a REST API is mostly outside the scope of this tutorial since it is language specific, but I will give a brief example in Ruby using a library called <a href=\"http://www.sinatrarb.com/\">Sinatra</a>:</p>\n<div class=\"highlight\"><pre><span class=\"nb\">require</span> <span class=\"s1\">&#39;sinatra&#39;</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;JSON&#39;</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;widget&#39;</span> <span class=\"c1\"># our imaginary widget model</span>\n\n<span class=\"c1\"># list all</span>\n<span class=\"n\">get</span> <span class=\"s1\">&#39;/widgets&#39;</span> <span class=\"k\">do</span>\n  <span class=\"no\">Widget</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"o\">.</span><span class=\"n\">to_json</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># view one</span>\n<span class=\"n\">get</span> <span class=\"s1\">&#39;/widgets/:id&#39;</span> <span class=\"k\">do</span>\n  <span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">[</span><span class=\"ss\">:id</span><span class=\"o\">]</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">status</span> <span class=\"mi\">404</span> <span class=\"k\">if</span> <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">nil?</span>\n  <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">to_json</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># create</span>\n<span class=\"n\">post</span> <span class=\"s1\">&#39;/widgets&#39;</span> <span class=\"k\">do</span>\n  <span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">[</span><span class=\"s1\">&#39;widget&#39;</span><span class=\"o\">]</span><span class=\"p\">)</span>\n  <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">save</span>\n  <span class=\"n\">status</span> <span class=\"mi\">201</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># update</span>\n<span class=\"n\">put</span> <span class=\"s1\">&#39;/widgets/:id&#39;</span> <span class=\"k\">do</span>\n  <span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">[</span><span class=\"ss\">:id</span><span class=\"o\">]</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">status</span> <span class=\"mi\">404</span> <span class=\"k\">if</span> <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">nil?</span>\n  <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">[</span><span class=\"ss\">:widget</span><span class=\"o\">]</span><span class=\"p\">)</span>\n  <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">save</span>\n  <span class=\"n\">status</span> <span class=\"mi\">202</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">delete</span> <span class=\"s1\">&#39;/widgets/:id&#39;</span> <span class=\"k\">do</span>\n  <span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">[</span><span class=\"ss\">:id</span><span class=\"o\">]</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">status</span> <span class=\"mi\">404</span> <span class=\"k\">if</span> <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">nil?</span>\n  <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">delete</span>\n  <span class=\"n\">status</span> <span class=\"mi\">202</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n<h2>API authentication</h2>\n\n<p>In normal web applications, handling authentication is usually handled by accepting a username and password, and saving the user ID in the session. The user&#39;s browser saves a cookie with ID of the session. When the user visits a page on the site that requires authentication, the browser sends the cookie, the app looks up the session by the ID (if it hasn&#39;t expired), and since the user ID was saved in the session, the user is allowed to view the page.</p>\n\n<p>With an API, using sessions to keep track of users is not necessarily the best approach. Sometimes, your users may want to access the API directly, other times the user may way to authorize another application to access the API on their behalf.</p>\n\n<p>The solution to this is to use token based authentication. The user logs in with their username and password and the application responds with a unique token that the user can use for future requests. This token can be passed onto the application so that the user can revoke that token later if they choose to deny that application further access.</p>\n\n<p>There is a standard way of doing this that has become very popular. It&#39;s called OAuth. Specifically, version 2 of the OAuth standard. There are a lot of great resources online for implementing OAuth so I would say that is outside the scope of this tutorial. If you are using Ruby, there are some great libraries that handle most of the work for you, like <a href=\"http://www.omniauth.org/\">OmniAuth</a>.</p>\n\n<p>Hopefully, I&#39;ve filled in enough blanks for you to get started. If you still have questions, you may find <a href=\"http://rest.elkstein.org/\">this tutorial</a> helpful.</p>\n\n<p>Feel free to post any questions or criticisms in the comments.</p>\n","body_markdown":"If you're reading this, you've probably heard the terms **API** and **REST** thrown around and you're starting to wonder what the fuss is all about. Maybe you already know a little bit, but don't know how to get started. In this guide, I will explain the basics of REST and how to get started building an API (including authentication) for your application.\r\n\r\n## What is an API?\r\n\r\nThe term API stands for Application Programming Interface. The term can be used to describe the features of a library, or how to interact with it. Your favorite library may have \"API Documentation\" which documents which functions are available, how you call them, which arguments are required, etc.\r\n\r\nHowever, these days, when people refer to an API they are most likely referring to an HTTP API, which can be a way of sharing application data over the internet. For example, Twitter has an API that allows you to request tweets in a format that makes it easy to import into your own application. This is the true power of HTTP APIs, being able to \"mashup\" data from multiple applications into your own hybrid application, or create an application which enhances the experience of using someone else's application.\r\n\r\nFor example, let's say we have an application that allows you to view, create, edit, and delete widgets. We could create an HTTP API that allows you to perform these functions:\r\n\r\n```text\r\nhttp://example.com/view_widgets\r\nhttp://example.com/create_new_widget?name=Widgetizer\r\nhttp://example.com/update_widget?id=123&name=Foo\r\nhttp://example.com/delete_widget?id=123\r\n```\r\n\r\nA problem has started to arise when everyone starts implementing their own APIs. Without a standard way of naming URLs, you always have to refer to the documentation to understand how the API works. One API might have a URL like `/view_widgets` whereas another API might use `/widgets/all`.\r\n\r\nDon't worry, REST comes to rescue us from this mess.\r\n\r\n## What is REST?\r\n\r\nREST stands for **Re**presentational **S**tate **T**ransfer. This is a term invented by Roy Fielding to describe a standard way of creating HTTP APIs. He noticed that the four common actions (view, create, edit, and delete) map directly to HTTP verbs that are already implemented: `GET`, `POST`, `PUT`, `DELETE`.\r\n\r\nIf you're new to HTTP, you may not be familiar with some of these verbs. So let me give a brief rundown on HTTP methods.\r\n\r\n## HTTP methods\r\n\r\nThere are technically 8 different HTTP methods:\r\n\r\n```text\r\nGET\r\nPOST\r\nPUT\r\nDELETE\r\nOPTIONS\r\nHEAD\r\nTRACE\r\nCONNECT\r\n```\r\n\r\nMost of the time, when you're clicking around in your browser, you are only ever using the `GET` HTTP method. `GET` is used when you are \"getting\" a resource from the internet. When you submit a form, you are usually using the `POST` method to \"post data\" back to the website. As for the other methods, some browsers don't even implement them all. However, for our uses, that doesn't matter. What matters is that we have a bunch of \"verbs\" to choose from which help to describe the actions we are taking. We will be using client libraries which already know how to use the different HTTP methods.\r\n\r\n## Examples of REST\r\n\r\nLet's look at a few examples of what makes an API \"RESTful\". Using our widgets example again...\r\n\r\nIf we wanted to view all widgets, the URL would look like this:\r\n\r\n```text\r\nGET http://example.com/widgets\r\n```\r\n\r\nCreate a new widget by posting the data:\r\n\r\n```text\r\nPOST http://example.com/widgets\r\nData:\r\n    name = Foobar\r\n```\r\n\r\nTo view a single widget we \"get\" it by specifying that widget's id:\r\n\r\n```text\r\nGET http://example.com/widgets/123\r\n```\r\n\r\nUpdate that widget by \"putting\" the new data:\r\n\r\n```text\r\nPUT http://example.com/widgets/123\r\nData:\r\n    name = New name\r\n    color = blue\r\n```\r\n\r\nDelete that widget:\r\n\r\n```text\r\nDELETE http://example.com/widgets/123\r\n```\r\n\r\n## Anatomy of a REST URL\r\n\r\nYou might have noticed from the previous examples that REST URLs use a consistent naming scheme. When you are interacting with an API, you are almost always manipulating some sort of object. In our examples, this is a `Widget`. In REST terminology, this is called a **Resource**. The first part of the URL is always the plural form of the resource:\r\n\r\n```text\r\n/widgets\r\n```\r\n\r\nThis is always used when referring to this collection of resources (\"list all\" and \"add one\" actions). When you are working with a specific resource, you add the ID to the URL.\r\n\r\n```text\r\n/widgets/123\r\n```\r\n\r\nThis URL is used when you want to \"view\", \"edit\", or \"delete\" the particular resource.\r\n\r\n## Nested Resources\r\n\r\nLet's say our `widgets` have many users associated with them. What would this URL structure look like?\r\n\r\nList all:\r\n\r\n```text\r\nGET /widgets/123/users\r\n```\r\n\r\nAdd one:\r\n\r\n```text\r\nPOST /widgets/123/users\r\nData:\r\n    name = Andrew\r\n```\r\n\r\nNested resources are perfectly acceptable in URLs. However, it's not a best practice to go more than two levels deep. It's not necessary because you can simply refer to those nested resources by ID rather than nesting them within their parents. For example:\r\n\r\n```text\r\n/widgets/123/users/456/sports/789\r\n```\r\n\r\n...can be referenced as:\r\n\r\n```text\r\n/users/456/sports/789\r\n```\r\n\r\n...or even:\r\n\r\n```text\r\n/sports/789\r\n```\r\n\r\n## HTTP Status Codes\r\n\r\nAnother important part of REST is responding with the correct status code for the type of request that was made. If you're new to HTTP status codes, heres a quick summary. When you make an HTTP request, the server will respond with a code which corresponds to whether or not the request was successful and how the client should proceed. There are four different levels of codes:\r\n\r\n- 2xx = Success\r\n- 3xx = Redirect\r\n- 4xx = User error\r\n- 5xx = Server error\r\n\r\nHere's a list of the most important status codes:\r\n\r\n### Success codes:\r\n- 200 - OK (the default)\r\n- 201 - Created\r\n- 202 - Accepted (often used for delete requests)\r\n\r\n### User error codes:\r\n\r\n- 400 - Bad Request (generic user error/bad data)\r\n- 401 - Unauthorized (this area requires you to log in)\r\n- 404 - Not Found (bad URL)\r\n- 405 - Method Not Allowed (wrong HTTP method)\r\n- 409 - Conflict (i.e. trying to create the same resource with a PUT request)\r\n\r\n## API response formats\r\n\r\nWhen you make an HTTP request, you can request the format that you want to receive. For example, making a request for a webpage, you want the format to be in HTML, or if you are downloading an image, the format returned should be an image. However, it's the server's responsibility to respond in the format that was requested.\r\n\r\nJSON has quickly become the format of choice for REST APIs. It has a lightweight, readable syntax that can be easily manipulated. So when a user of our API makes a request and specifies JSON as the format they would prefer:\r\n\r\n```text\r\nGET /widgets\r\nAccept: application/json\r\n```\r\n\r\n...our API will return an array of `widgets` formatted as JSON:\r\n\r\n```javascript\r\n[\r\n  {\r\n    id: 123,\r\n    name: 'Simple Widget'\r\n  },\r\n  {\r\n    id: 456,\r\n    name: 'My other widget'\r\n  }\r\n]\r\n```\r\n\r\nIf the user requests a format that we haven't implemented, what do we do? You can throw some type of error, but I would recommend enforcing JSON as your standard response format. It's the format that your developers will want to use. No reason to support other formats unless you already have an API which needs to be supported.\r\n\r\n## Building a REST API\r\n\r\nActually building a REST API is mostly outside the scope of this tutorial since it is language specific, but I will give a brief example in Ruby using a library called [Sinatra](http://www.sinatrarb.com/):\r\n\r\n```ruby\r\nrequire 'sinatra'\r\nrequire 'JSON'\r\nrequire 'widget' # our imaginary widget model\r\n\r\n# list all\r\nget '/widgets' do\r\n  Widget.all.to_json\r\nend\r\n\r\n# view one\r\nget '/widgets/:id' do\r\n  widget = Widget.find(params[:id])\r\n  return status 404 if widget.nil?\r\n  widget.to_json\r\nend\r\n\r\n# create\r\npost '/widgets' do\r\n  widget = Widget.new(params['widget'])\r\n  widget.save\r\n  status 201\r\nend\r\n\r\n# update\r\nput '/widgets/:id' do\r\n  widget = Widget.find(params[:id])\r\n  return status 404 if widget.nil?\r\n  widget.update(params[:widget])\r\n  widget.save\r\n  status 202\r\nend\r\n\r\ndelete '/widgets/:id' do\r\n  widget = Widget.find(params[:id])\r\n  return status 404 if widget.nil?\r\n  widget.delete\r\n  status 202\r\nend\r\n```\r\n\r\n## API authentication\r\n\r\nIn normal web applications, handling authentication is usually handled by accepting a username and password, and saving the user ID in the session. The user's browser saves a cookie with ID of the session. When the user visits a page on the site that requires authentication, the browser sends the cookie, the app looks up the session by the ID (if it hasn't expired), and since the user ID was saved in the session, the user is allowed to view the page.\r\n\r\nWith an API, using sessions to keep track of users is not necessarily the best approach. Sometimes, your users may want to access the API directly, other times the user may way to authorize another application to access the API on their behalf.\r\n\r\nThe solution to this is to use token based authentication. The user logs in with their username and password and the application responds with a unique token that the user can use for future requests. This token can be passed onto the application so that the user can revoke that token later if they choose to deny that application further access.\r\n\r\nThere is a standard way of doing this that has become very popular. It's called OAuth. Specifically, version 2 of the OAuth standard. There are a lot of great resources online for implementing OAuth so I would say that is outside the scope of this tutorial. If you are using Ruby, there are some great libraries that handle most of the work for you, like [OmniAuth](http://www.omniauth.org/).\r\n\r\nHopefully, I've filled in enough blanks for you to get started. If you still have questions, you may find [this tutorial](http://rest.elkstein.org/) helpful.\r\n\r\nFeel free to post any questions or criticisms in the comments.","created_at":"2012-09-13T19:30:14Z","excerpt":"If you're reading this, you've probably heard the terms **API** and **REST** thrown around and you're starting to wonder what the fuss is all about. Maybe you already know a little bit, but don't know how to get started. In this guide, I will explain the basics of REST and how to get started building an API (including authentication) for your application.","id":20,"published":true,"published_on":"2012-09-13","title":"Beginners guide to creating a REST API","updated_at":"2012-09-14T19:16:12Z"},{"body_html":"<p>Have you ever wanted to slowly transition a PHP application to use Ruby on Rails? You can do this by running Rails and PHP in the same application! It may sound crazy, but when writing PHP code starts driving you crazy, you start to do crazy things. In this tutorial, I will show you what you need to do to be successful.</p>\n\n<p>For demonstration purposes, we&#39;ll set up a &quot;/orders&quot; section of the PHP app that uses Rails behind the scenes. The orders section will only allow authenticated users by sharing the logged in user session from the PHP app.</p>\n\n<h2>Assumptions</h2>\n\n<p>This guide assumes you will be using:</p>\n\n<ul>\n<li>Zend Framework 1.11</li>\n<li>Rails 3.2.8</li>\n<li>Apache</li>\n<li>Passenger Apache module for serving your Rails app</li>\n</ul>\n\n<h2>Directory structure</h2>\n\n<p>Let&#39;s assume you have a directory which contains your PHP app and Rails app in a single project directory:</p>\n<div class=\"highlight\"><pre>project\n  |-- php-app\n      |-- application\n      |-- public\n      |-- ...etc\n  |-- rails-app\n      |-- app\n      |-- public\n      |-- ...etc\n</pre></div>\n\n<h2>Configuring Apache</h2>\n\n<p>First things first: you need to configure Apache to serve your Rails application within your Zend Framework project:</p>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;VirtualHost</span> <span class=\"s\">*:80</span><span class=\"nt\">&gt;</span>\n  <span class=\"nb\">ServerName</span> your.app.com\n  <span class=\"nb\">DocumentRoot</span> <span class=\"sx\">/path/to/php-app/public</span>\n\n  <span class=\"nt\">&lt;Directory</span> <span class=\"s\">/path/to/php-app/public/orders</span><span class=\"nt\">&gt;</span>\n    <span class=\"nb\">Options</span> -MultiViews\n    <span class=\"nb\">RailsBaseURI</span> /\n  <span class=\"nt\">&lt;/Directory&gt;</span>\n<span class=\"nt\">&lt;/VirtualHost&gt;</span>\n</pre></div>\n\n<p>As you can see by the Apache directory configuration, Apache will be looking for a directory called <code>orders</code> in our PHP app&#39;s public directory. We&#39;ll need to create a symlink to our Rails app&#39;s <strong>public</strong> directory.</p>\n<div class=\"highlight\"><pre><span class=\"gp\">$</span> <span class=\"nb\">cd </span>php-app/public\n<span class=\"gp\">$</span> ln -s ../../rails-app/public orders\n</pre></div>\n\n<p>More Passenger configuration options can be found in the Passenger docs under <a href=\"http://www.modrails.com/documentation/Users%20guide%20Apache.html#deploying_rack_to_sub_uri\">deploying to a sub-uri</a>.</p>\n\n<p>Alternatively, if you wanted to use something other than Passenger, you could use Apache&#39;s mod<em>proxy. Setting up mod</em>proxy is outside the scope of this tutorial, but here&#39;s the configuration:</p>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;VirtualHost</span> <span class=\"s\">*:80</span><span class=\"nt\">&gt;</span>\n  <span class=\"nb\">ServerName</span> your.app.com\n  <span class=\"nb\">DocumentRoot</span> <span class=\"sx\">/path/to/php-app/public</span>\n  <span class=\"nb\">ProxyPass</span> <span class=\"sx\">/orders</span> http://127.0.0.1:3000/orders\n<span class=\"nt\">&lt;/VirtualHost&gt;</span>\n</pre></div>\n\n<p>Now if we were to add some scaffolding for <code>orders</code> and restart our Rails app, everything should work:</p>\n<div class=\"highlight\"><pre><span class=\"gp\">$</span> <span class=\"nb\">cd </span>rails-app\n<span class=\"gp\">$</span> rails g scaffold Order food:text drink:string\n<span class=\"gp\">$</span> touch tmp/restart.txt\n<span class=\"gp\">$</span> open http://your.app.com/orders\n</pre></div>\n\n<h2>Sharing Sessions</h2>\n\n<p>In order for a user to stay logged in when navigating to our new <code>/orders</code> route, we will need to share sessions across both applications. We can do this by storing the session information in the database. However, it&#39;s not that simple. Rails and Zend Framework each have their own way of storing session data.</p>\n\n<p><img src=\"/assets/posts/19_sessions.png\" alt=\"Session IDs stored in cookies\"></p>\n\n<p>We will need to configure both Rails and Zend Framework so they store the session using the same approach.</p>\n\n<h3>Configuring Rails</h3>\n\n<p>To start storing session information in the database in the Rails application, do the following:</p>\n\n<p>Enable the following line in <code>config/initializers/session_store.rb</code>:</p>\n<div class=\"highlight\"><pre><span class=\"no\">YourApp</span><span class=\"o\">::</span><span class=\"no\">Application</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">session_store</span> <span class=\"ss\">:active_record_store</span>\n</pre></div>\n\n<p>Next you will generate a migration to create the database table to store the session information:</p>\n<div class=\"highlight\"><pre><span class=\"gp\">$</span> rails generate session_migration\n</pre></div>\n\n<h3>Configuring PHP</h3>\n\n<p>Now that Rails is configured to store sessions in the database, we need to configure our PHP application to do the same. We can <a href=\"http://framework.zend.com/manual/en/zend.application.available-resources.html#zend.application.available-resources.session\">configure Zend Framework to store session data in the database</a>. Add these lines to your <code>config.ini</code> file:</p>\n<div class=\"highlight\"><pre><span class=\"na\">resources.session.saveHandler.class</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Zend_Session_SaveHandler_DbTable&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;session&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.primary[]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;session_id&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.primary[]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;save_path&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.primary[]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;name&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.primaryAssignment[]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;sessionId&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.primaryAssignment[]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;sessionSavePath&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.primaryAssignment[]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;sessionName&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.modifiedColumn</span> <span class=\"o\">=</span> <span class=\"s\">&quot;modified&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.dataColumn</span> <span class=\"o\">=</span> <span class=\"s\">&quot;session_data&quot;</span>\n<span class=\"na\">resources.session.saveHandler.options.lifetimeColumn</span> <span class=\"o\">=</span> <span class=\"s\">&quot;lifetime&quot;</span>\n</pre></div>\n\n<p>...and create the database table...</p>\n<div class=\"highlight\"><pre><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"o\">`</span><span class=\"k\">session</span><span class=\"o\">`</span> <span class=\"p\">(</span>\n    <span class=\"o\">`</span><span class=\"n\">session_id</span><span class=\"o\">`</span> <span class=\"nb\">char</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n    <span class=\"o\">`</span><span class=\"n\">save_path</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n    <span class=\"o\">`</span><span class=\"n\">name</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span> <span class=\"k\">DEFAULT</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n    <span class=\"o\">`</span><span class=\"n\">modified</span><span class=\"o\">`</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"o\">`</span><span class=\"n\">lifetime</span><span class=\"o\">`</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"o\">`</span><span class=\"n\">session_data</span><span class=\"o\">`</span> <span class=\"nb\">text</span><span class=\"p\">,</span>\n    <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"o\">`</span><span class=\"n\">Session_ID</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">save_path</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">name</span><span class=\"o\">`</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n</pre></div>\n\n<p>Zend Framework will now automatically save session information to the database as a serialized array. Let&#39;s say you were saving the <code>user_id</code> in the session like this:</p>\n<div class=\"highlight\"><pre><span class=\"x\">$session = new Zend_Session_Namespace(&#39;Auth&#39;);</span>\n<span class=\"x\">$session-&gt;logged_in_user_id = 47;</span>\n</pre></div>\n\n<p>If you were to view a session record in the database it would look like this:</p>\n<div class=\"highlight\"><pre>+----------------------------------+---------------+-----------+------------+----------+-------------------------------------------+\n| session_id                       | save_path     | name      | modified   | lifetime | session_data                              |\n+----------------------------------+---------------+-----------+------------+----------+-------------------------------------------+\n| 729d850de359a98b25a4459362c7bbcc | /var/lib/php5 | PHPSESSID | 1346463131 |     1440 | Auth|a:1:{s:17:&quot;logged_in_user_id&quot;;i:47;} |\n+----------------------------------+---------------+-----------+------------+----------+-------------------------------------------+\n</pre></div>\n\n<p><strong>TODO:</strong> Sorry, still working through this part. Any tips, feel free to leave them in the comments.</p>\n\n<h2>Legacy Database Naming Scheme</h2>\n\n<p>What do you do if you used camel case instead of snake case for naming your database tables and fields and want to access those through your Rails app? Rather than update all of your PHP models to use snake case, it will be easier to tell active record to use your custom naming scheme.</p>\n\n<p>When you use the Rails generators, you can specify the name of your columns as camel case:</p>\n<div class=\"highlight\"><pre><span class=\"gp\">$</span> rails g scaffold Post Title Body:text\n</pre></div>\n\n<p>...however, the table names and primary key will still be snake case. You will need to manually adjust these in the migration and model.</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Post</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"nb\">self</span><span class=\"o\">.</span><span class=\"n\">primary_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ID&#39;</span>\n  <span class=\"nb\">self</span><span class=\"o\">.</span><span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Posts&#39;</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n<p>But it will be cleaner in the long run if you just define a base class to handle this:</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Post</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">MyBase</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">module</span> <span class=\"nn\">ActiveRecord</span>\n  <span class=\"k\">class</span> <span class=\"nc\">MyBase</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n\n    <span class=\"nb\">self</span><span class=\"o\">.</span><span class=\"n\">primary_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ID&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">inherited</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n      <span class=\"nb\">self</span><span class=\"o\">.</span><span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">to_s</span><span class=\"o\">.</span><span class=\"n\">pluralize</span> <span class=\"c1\">#class name is already camel cased</span>\n      <span class=\"k\">super</span>\n    <span class=\"k\">end</span>\n\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n<p>Hopefully I&#39;ve covered everything you need to know in order for this to work. If you find that I&#39;ve left anything out, or have a criticism of this approach, please leave a comment so you can help others who might have stumbled across this post.</p>\n","body_markdown":"Have you ever wanted to slowly transition a PHP application to use Ruby on Rails? You can do this by running Rails and PHP in the same application! It may sound crazy, but when writing PHP code starts driving you crazy, you start to do crazy things. In this tutorial, I will show you what you need to do to be successful.\r\n\r\nFor demonstration purposes, we'll set up a \"/orders\" section of the PHP app that uses Rails behind the scenes. The orders section will only allow authenticated users by sharing the logged in user session from the PHP app.\r\n\r\n## Assumptions\r\n\r\nThis guide assumes you will be using:\r\n\r\n - Zend Framework 1.11\r\n - Rails 3.2.8\r\n - Apache\r\n - Passenger Apache module for serving your Rails app\r\n\r\n## Directory structure\r\n\r\nLet's assume you have a directory which contains your PHP app and Rails app in a single project directory:\r\n\r\n```text\r\nproject\r\n  |-- php-app\r\n      |-- application\r\n      |-- public\r\n      |-- ...etc\r\n  |-- rails-app\r\n      |-- app\r\n      |-- public\r\n      |-- ...etc\r\n```\r\n\r\n## Configuring Apache\r\n\r\nFirst things first: you need to configure Apache to serve your Rails application within your Zend Framework project:\r\n\r\n```apache\r\n<VirtualHost *:80>\r\n  ServerName your.app.com\r\n  DocumentRoot /path/to/php-app/public\r\n\r\n  <Directory /path/to/php-app/public/orders>\r\n    Options -MultiViews\r\n    RailsBaseURI /\r\n  </Directory>\r\n</VirtualHost>\r\n```\r\n\r\nAs you can see by the Apache directory configuration, Apache will be looking for a directory called `orders` in our PHP app's public directory. We'll need to create a symlink to our Rails app's **public** directory.\r\n\r\n```console\r\n$ cd php-app/public\r\n$ ln -s ../../rails-app/public orders\r\n```\r\n\r\nMore Passenger configuration options can be found in the Passenger docs under [deploying to a sub-uri](http://www.modrails.com/documentation/Users%20guide%20Apache.html#deploying_rack_to_sub_uri).\r\n\r\nAlternatively, if you wanted to use something other than Passenger, you could use Apache's mod_proxy. Setting up mod_proxy is outside the scope of this tutorial, but here's the configuration:\r\n\r\n```apache\r\n<VirtualHost *:80>\r\n  ServerName your.app.com\r\n  DocumentRoot /path/to/php-app/public\r\n  ProxyPass /orders http://127.0.0.1:3000/orders\r\n</VirtualHost>\r\n```\r\n\r\nNow if we were to add some scaffolding for `orders` and restart our Rails app, everything should work:\r\n\r\n```console\r\n$ cd rails-app\r\n$ rails g scaffold Order food:text drink:string\r\n$ touch tmp/restart.txt\r\n$ open http://your.app.com/orders\r\n```\r\n\r\n## Sharing Sessions\r\n\r\nIn order for a user to stay logged in when navigating to our new `/orders` route, we will need to share sessions across both applications. We can do this by storing the session information in the database. However, it's not that simple. Rails and Zend Framework each have their own way of storing session data.\r\n\r\n![Session IDs stored in cookies](/assets/posts/19_sessions.png)\r\n\r\nWe will need to configure both Rails and Zend Framework so they store the session using the same approach.\r\n\r\n### Configuring Rails\r\n\r\nTo start storing session information in the database in the Rails application, do the following:\r\n\r\nEnable the following line in `config/initializers/session_store.rb`:\r\n\r\n```ruby\r\nYourApp::Application.config.session_store :active_record_store\r\n```\r\n\r\nNext you will generate a migration to create the database table to store the session information:\r\n\r\n```console\r\n$ rails generate session_migration\r\n```\r\n\r\n### Configuring PHP\r\n\r\nNow that Rails is configured to store sessions in the database, we need to configure our PHP application to do the same. We can [configure Zend Framework to store session data in the database](http://framework.zend.com/manual/en/zend.application.available-resources.html#zend.application.available-resources.session). Add these lines to your `config.ini` file:\r\n\r\n```ini\r\nresources.session.saveHandler.class = \"Zend_Session_SaveHandler_DbTable\"\r\nresources.session.saveHandler.options.name = \"session\"\r\nresources.session.saveHandler.options.primary[] = \"session_id\"\r\nresources.session.saveHandler.options.primary[] = \"save_path\"\r\nresources.session.saveHandler.options.primary[] = \"name\"\r\nresources.session.saveHandler.options.primaryAssignment[] = \"sessionId\"\r\nresources.session.saveHandler.options.primaryAssignment[] = \"sessionSavePath\"\r\nresources.session.saveHandler.options.primaryAssignment[] = \"sessionName\"\r\nresources.session.saveHandler.options.modifiedColumn = \"modified\"\r\nresources.session.saveHandler.options.dataColumn = \"session_data\"\r\nresources.session.saveHandler.options.lifetimeColumn = \"lifetime\"\r\n```\r\n\r\n...and create the database table...\r\n\r\n```sql\r\nCREATE TABLE `session` (\r\n    `session_id` char(32) NOT NULL,\r\n    `save_path` varchar(32) NOT NULL,\r\n    `name` varchar(32) NOT NULL DEFAULT '',\r\n    `modified` int,\r\n    `lifetime` int,\r\n    `session_data` text,\r\n    PRIMARY KEY (`Session_ID`, `save_path`, `name`)\r\n);\r\n```\r\n\r\nZend Framework will now automatically save session information to the database as a serialized array. Let's say you were saving the `user_id` in the session like this:\r\n\r\n```php\r\n$session = new Zend_Session_Namespace('Auth');\r\n$session->logged_in_user_id = 47;\r\n```\r\n\r\nIf you were to view a session record in the database it would look like this:\r\n\r\n```text\r\n+----------------------------------+---------------+-----------+------------+----------+-------------------------------------------+\r\n| session_id                       | save_path     | name      | modified   | lifetime | session_data                              |\r\n+----------------------------------+---------------+-----------+------------+----------+-------------------------------------------+\r\n| 729d850de359a98b25a4459362c7bbcc | /var/lib/php5 | PHPSESSID | 1346463131 |     1440 | Auth|a:1:{s:17:\"logged_in_user_id\";i:47;} |\r\n+----------------------------------+---------------+-----------+------------+----------+-------------------------------------------+\r\n```\r\n\r\n**TODO:** Sorry, still working through this part. Any tips, feel free to leave them in the comments.\r\n\r\n## Legacy Database Naming Scheme\r\n\r\nWhat do you do if you used camel case instead of snake case for naming your database tables and fields and want to access those through your Rails app? Rather than update all of your PHP models to use snake case, it will be easier to tell active record to use your custom naming scheme.\r\n\r\nWhen you use the Rails generators, you can specify the name of your columns as camel case:\r\n\r\n```console\r\n$ rails g scaffold Post Title Body:text\r\n```\r\n\r\n...however, the table names and primary key will still be snake case. You will need to manually adjust these in the migration and model.\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  self.primary_key = 'ID'\r\n  self.table_name = 'Posts'\r\nend\r\n```\r\n\r\nBut it will be cleaner in the long run if you just define a base class to handle this:\r\n\r\n```ruby\r\nclass Post < ActiveRecord::MyBase\r\nend\r\n\r\nmodule ActiveRecord\r\n  class MyBase < ActiveRecord::Base\r\n\r\n    self.primary_key = 'ID'\r\n\r\n    def self.inherited(child)\r\n      self.table_name = child.to_s.pluralize #class name is already camel cased\r\n      super\r\n    end\r\n\r\n  end\r\nend\r\n```\r\n\r\nHopefully I've covered everything you need to know in order for this to work. If you find that I've left anything out, or have a criticism of this approach, please leave a comment so you can help others who might have stumbled across this post.","created_at":"2012-08-30T16:13:05Z","excerpt":"Have you ever wanted to slowly transition a PHP application to use Ruby on Rails? You can do this by running Rails and PHP in the same application! It may sound crazy, but when writing PHP code starts driving you crazy, you start to do crazy things. In this tutorial, I will show you what you need to do to be successful.","id":19,"published":true,"published_on":"2012-08-30","title":"How to use Rails in a PHP application","updated_at":"2012-09-17T20:22:52Z"},{"body_html":"<p>Sometimes you are in the unfortunate situation of supporting a legacy PHP application. You need to add new features (like a REST API), but you don&#39;t want all the cruft that goes with PHP development. In this tutorial, I will demonstrate how you can add a REST API to an existing Zend Framework application.</p>\n\n<p>I&#39;ll be using <a href=\"https://github.com/intridea/grape/\">Grape</a> for creating a standalone API because of it&#39;s simplicity. The guts of this tutorial applies the same to Rails, Sinatra, etc.</p>\n\n<h2>Assumptions:</h2>\n\n<p>This tutorial assumes that you are already familiar with Ruby, Bundler, Rack, and know how to run a simple Rack application.</p>\n\n<h2>Creating the API endpoints</h2>\n\n<p>Assuming you have a directory which includes a Gemfile and a config.ru:</p>\n<div class=\"highlight\"><pre><span class=\"c1\"># Gemfile:</span>\n<span class=\"n\">source</span> <span class=\"ss\">:rubygems</span>\n<span class=\"n\">gem</span> <span class=\"s1\">&#39;grape&#39;</span>\n\n<span class=\"c1\"># config.ru</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;bundler/setup&#39;</span>\n<span class=\"no\">Bundler</span><span class=\"o\">.</span><span class=\"n\">require</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run_php</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n  <span class=\"n\">base_path</span> <span class=\"o\">=</span> <span class=\"no\">File</span><span class=\"o\">.</span><span class=\"n\">expand_path</span><span class=\"p\">(</span><span class=\"s1\">&#39;path/to/php-app/bin&#39;</span><span class=\"p\">,</span> <span class=\"bp\">__FILE__</span><span class=\"p\">)</span>\n  <span class=\"sb\">`php </span><span class=\"si\">#{</span><span class=\"n\">base_path</span><span class=\"si\">}</span><span class=\"sb\">/api_bridge.php </span><span class=\"si\">#{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAPI</span> <span class=\"o\">&lt;</span> <span class=\"no\">Grape</span><span class=\"o\">::</span><span class=\"no\">API</span>\n  <span class=\"nb\">format</span> <span class=\"ss\">:json</span>\n  <span class=\"n\">resource</span> <span class=\"ss\">:groups</span> <span class=\"k\">do</span>\n    <span class=\"n\">get</span> <span class=\"k\">do</span>\n      <span class=\"n\">run_php</span> <span class=\"s1\">&#39;Groups&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fetchAll&#39;</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">run</span> <span class=\"no\">MyAPI</span>\n</pre></div>\n\n<p>Here I have simply defined a <code>/groups</code> endpoint which responds to a GET request, which shells out to a PHP script and always returns a JSON reponse.</p>\n\n<h2>The PHP bridge</h2>\n\n<p>Let&#39;s assume that you already have a Zend Framework application, which has a Groups model. We want to call <code>Groups::fetchAll()</code> in order to get all the groups and expose it through the API. Here&#39;s what the bridge script might look like:</p>\n<div class=\"highlight\"><pre><span class=\"cp\">&lt;?php</span>\n<span class=\"k\">require</span> <span class=\"nb\">dirname</span><span class=\"p\">(</span><span class=\"k\">__FILE__</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">&#39;/cli-bootstrap.php&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$args</span> <span class=\"o\">=</span> <span class=\"nv\">$argv</span><span class=\"p\">;</span>\n<span class=\"nv\">$current_file</span> <span class=\"o\">=</span> <span class=\"nb\">array_shift</span><span class=\"p\">(</span><span class=\"nv\">$args</span><span class=\"p\">);</span>\n<span class=\"nv\">$class</span> <span class=\"o\">=</span> <span class=\"nb\">array_shift</span><span class=\"p\">(</span><span class=\"nv\">$args</span><span class=\"p\">);</span>\n<span class=\"nv\">$method</span> <span class=\"o\">=</span> <span class=\"nb\">array_shift</span><span class=\"p\">(</span><span class=\"nv\">$args</span><span class=\"p\">);</span>\n<span class=\"nv\">$arguments</span> <span class=\"o\">=</span> <span class=\"nv\">$args</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$ref</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ReflectionClass</span><span class=\"p\">(</span><span class=\"nv\">$class</span><span class=\"p\">);</span>\n<span class=\"nv\">$instance</span> <span class=\"o\">=</span> <span class=\"nv\">$ref</span><span class=\"o\">-&gt;</span><span class=\"na\">newInstance</span><span class=\"p\">();</span>\n<span class=\"nv\">$result</span> <span class=\"o\">=</span> <span class=\"nv\">$ref</span><span class=\"o\">-&gt;</span><span class=\"na\">getMethod</span><span class=\"p\">(</span><span class=\"nv\">$method</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"na\">invokeArgs</span><span class=\"p\">(</span><span class=\"nv\">$instance</span><span class=\"p\">,</span> <span class=\"nv\">$arguments</span><span class=\"p\">);</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">is_callable</span><span class=\"p\">(</span><span class=\"k\">array</span><span class=\"p\">(</span><span class=\"nv\">$result</span><span class=\"p\">,</span> <span class=\"s1\">&#39;toArray&#39;</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n    <span class=\"k\">echo</span> <span class=\"nx\">json_encode</span><span class=\"p\">(</span><span class=\"nv\">$result</span><span class=\"o\">-&gt;</span><span class=\"na\">toArray</span><span class=\"p\">());</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">echo</span> <span class=\"nx\">json_encode</span><span class=\"p\">(</span><span class=\"nv\">$result</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<p>This script simply bootstraps the Zend Framework application (which is outside the scope of this tutorial) in order to autoload our <code>Groups</code> class so that we can call <code>fetchAll()</code> on it which returns a JSON response.</p>\n\n<p>This was more of a quick proof-of-concept. I don&#39;t think this is ready for production usage.</p>\n","body_markdown":"Sometimes you are in the unfortunate situation of supporting a legacy PHP application. You need to add new features (like a REST API), but you don't want all the cruft that goes with PHP development. In this tutorial, I will demonstrate how you can add a REST API to an existing Zend Framework application.\r\n\r\nI'll be using [Grape](https://github.com/intridea/grape/) for creating a standalone API because of it's simplicity. The guts of this tutorial applies the same to Rails, Sinatra, etc.\r\n\r\n## Assumptions:\r\n\r\nThis tutorial assumes that you are already familiar with Ruby, Bundler, Rack, and know how to run a simple Rack application.\r\n\r\n## Creating the API endpoints\r\n\r\nAssuming you have a directory which includes a Gemfile and a config.ru:\r\n\r\n```ruby\r\n# Gemfile:\r\nsource :rubygems\r\ngem 'grape'\r\n\r\n# config.ru\r\nrequire 'bundler/setup'\r\nBundler.require\r\n\r\ndef run_php(*args)\r\n  base_path = File.expand_path('path/to/php-app/bin', __FILE__)\r\n  `php #{base_path}/api_bridge.php #{args.join(' ')}`\r\nend\r\n\r\nclass MyAPI < Grape::API\r\n  format :json\r\n  resource :groups do\r\n    get do\r\n      run_php 'Groups', 'fetchAll'\r\n    end\r\n  end\r\nend\r\n\r\nrun MyAPI\r\n```\r\n\r\nHere I have simply defined a `/groups` endpoint which responds to a GET request, which shells out to a PHP script and always returns a JSON reponse.\r\n\r\n## The PHP bridge\r\n\r\nLet's assume that you already have a Zend Framework application, which has a Groups model. We want to call `Groups::fetchAll()` in order to get all the groups and expose it through the API. Here's what the bridge script might look like:\r\n\r\n```php\r\n<?php\r\nrequire dirname(__FILE__) . '/cli-bootstrap.php';\r\n\r\n$args = $argv;\r\n$current_file = array_shift($args);\r\n$class = array_shift($args);\r\n$method = array_shift($args);\r\n$arguments = $args;\r\n\r\n$ref = new ReflectionClass($class);\r\n$instance = $ref->newInstance();\r\n$result = $ref->getMethod($method)->invokeArgs($instance, $arguments);\r\n\r\nif (is_callable(array($result, 'toArray'))) {\r\n\techo json_encode($result->toArray());\r\n} else {\r\n\techo json_encode($result);\r\n}\r\n```\r\n\r\nThis script simply bootstraps the Zend Framework application (which is outside the scope of this tutorial) in order to autoload our `Groups` class so that we can call `fetchAll()` on it which returns a JSON response.\r\n\r\nThis was more of a quick proof-of-concept. I don't think this is ready for production usage.","created_at":"2012-08-28T15:03:35Z","excerpt":"Sometimes you are in the unfortunate situation of supporting a legacy PHP application. You need to add new features (like a REST API), but you don't want all the cruft that goes with PHP development. In this tutorial, I will demonstrate how you can add a REST API to an existing Zend Framework application.","id":18,"published":true,"published_on":"2012-08-28","title":"How to create a REST API for your PHP application using Ruby","updated_at":"2012-09-17T15:42:15Z"},{"body_html":"<p>Sometimes you need to use two different databases in a single project. Using two databases in a single Zend Framework project should be a pretty simple and straight-forward thing. However, this turned out to be a bit of a wild goose chase in order to figure out the Zend Framework specific syntax.</p>\n\n<h2>Same host, different database name</h2>\n\n<p>If you only need to change the name of the database you connect to, you can specify that when you define your <code>Table</code> object. You can keep your default database connection the same as below:</p>\n<div class=\"highlight\"><pre><span class=\"na\">resources.db.adapter</span> <span class=\"o\">=</span> <span class=\"s\">PDO_MYSQL</span>\n<span class=\"na\">resources.db.params.dbname</span> <span class=\"o\">=</span> <span class=\"s\">database1</span>\n<span class=\"na\">resources.db.params.username</span> <span class=\"o\">=</span> <span class=\"s\">dbtest</span>\n<span class=\"na\">resources.db.params.password</span> <span class=\"o\">=</span> <span class=\"s\">******</span>\n<span class=\"na\">resources.db.params.hostname</span> <span class=\"o\">=</span> <span class=\"s\">localhost</span>\n<span class=\"na\">resources.db.isDefaultTableAdapter</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n</pre></div>\n\n<p>Now in your <code>Zend_Db_Table</code> class you can specify which database you want to use:</p>\n<div class=\"highlight\"><pre><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Customer</span> <span class=\"k\">extends</span> <span class=\"nx\">Zend_Db_Table_Abstract</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">protected</span> <span class=\"nv\">$_name</span>   <span class=\"o\">=</span> <span class=\"s1\">&#39;customers&#39;</span><span class=\"p\">;</span>\n    <span class=\"k\">protected</span> <span class=\"nv\">$_schema</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;database1&#39;</span><span class=\"p\">;</span> <span class=\"c1\">//not necessary because we made this the default</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Product</span> <span class=\"k\">extends</span> <span class=\"nx\">Zend_Db_Table_Abstract</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">protected</span> <span class=\"nv\">$_name</span>   <span class=\"o\">=</span> <span class=\"s1\">&#39;products&#39;</span><span class=\"p\">;</span>\n    <span class=\"k\">protected</span> <span class=\"nv\">$_schema</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;database2&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<p>If you have a different situation than this, you might find <a href=\"http://www.amazium.com/blog/using-different-databases-with-zend-framework\">this tutorial</a> helpful.</p>\n","body_markdown":"Sometimes you need to use two different databases in a single project. Using two databases in a single Zend Framework project should be a pretty simple and straight-forward thing. However, this turned out to be a bit of a wild goose chase in order to figure out the Zend Framework specific syntax.\r\n\r\n## Same host, different database name\r\n\r\nIf you only need to change the name of the database you connect to, you can specify that when you define your `Table` object. You can keep your default database connection the same as below:\r\n\r\n```ini\r\nresources.db.adapter = PDO_MYSQL\r\nresources.db.params.dbname = database1\r\nresources.db.params.username = dbtest\r\nresources.db.params.password = ******\r\nresources.db.params.hostname = localhost\r\nresources.db.isDefaultTableAdapter = true\r\n```\r\n\r\nNow in your `Zend_Db_Table` class you can specify which database you want to use:\r\n\r\n```php\r\n<?php\r\n\r\nclass Customer extends Zend_Db_Table_Abstract\r\n{\r\n    protected $_name   = 'customers';\r\n    protected $_schema = 'database1'; //not necessary because we made this the default\r\n}\r\n\r\nclass Product extends Zend_Db_Table_Abstract\r\n{\r\n    protected $_name   = 'products';\r\n    protected $_schema = 'database2';\r\n}\r\n```\r\n\r\nIf you have a different situation than this, you might find [this tutorial](http://www.amazium.com/blog/using-different-databases-with-zend-framework) helpful.","created_at":"2012-08-27T22:19:16Z","excerpt":"In this tutorial, I demonstrate how to use two different databases within the same Zend Framework project.","id":17,"published":true,"published_on":"2012-08-27","title":"How to use two different databases in the same Zend Framework project?","updated_at":"2012-08-29T05:31:18Z"},{"body_html":"<p>I've been writing a lot of Cucumber features lately and wanted to document a few great resources I've found. Once you start writing features in Cucumber you quickly realize there's a difference between writing declarative features versus imperative features. tl;dr: declarative features are easier to read and easier to maintain.</p>\n\n<ul>\n<li><a href=\"http://chrismdp.github.com/2011/09/layers-of-abstraction-writing-great-cucumber-code/\">Writing Great Cucumber Features</a></li>\n<li><a href=\"http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html\">Imperative vs. Declarative scenarios in user stories</a></li>\n<li><a href=\"http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/\">Whose domain is it anyway?</a></li>\n<li><a href=\"http://www.elabs.se/blog/15-you-re-cuking-it-wrong\">You're cuking it wrong</a></li>\n</ul>\n\n\n<p>...I plan to go back and summarize these links in the future.</p>\n","body_markdown":"I've been writing a lot of Cucumber features lately and wanted to document a few great resources I've found. Once you start writing features in Cucumber you quickly realize there's a difference between writing declarative features versus imperative features. tl;dr: declarative features are easier to read and easier to maintain.\r\n\r\n - [Writing Great Cucumber Features](http://chrismdp.github.com/2011/09/layers-of-abstraction-writing-great-cucumber-code/)\r\n - [Imperative vs. Declarative scenarios in user stories](http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html)\r\n - [Whose domain is it anyway?](http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/)\r\n - [You're cuking it wrong](http://www.elabs.se/blog/15-you-re-cuking-it-wrong)\r\n\r\n...I plan to go back and summarize these links in the future.","created_at":"2012-08-27T21:49:50Z","excerpt":"","id":16,"published":true,"published_on":"2012-08-27","title":"How to write better cucumber features","updated_at":"2012-08-27T21:49:50Z"},{"body_html":"<p>I found this tutorial very helpful. Posting it here so I can find it later. =]</p>\n\n<p>https://willj.net/2011/05/31/setting-up-postgresql-for-ruby-on-rails-development-on-os-x/</p>\n","body_markdown":"I found this tutorial very helpful. Posting it here so I can find it later. =]\r\n\r\nhttps://willj.net/2011/05/31/setting-up-postgresql-for-ruby-on-rails-development-on-os-x/","created_at":"2012-07-19T20:08:05Z","excerpt":"A tutorial about how to install PostgreSQL on a Mac using Homebrew so you can use it in your Ruby apps.","id":14,"published":true,"published_on":"2011-09-08","title":"How to install PostgreSQL on a Mac","updated_at":"2012-07-19T20:08:05Z"},{"body_html":"<p>Recently, I found a Ruby Gem that I wanted to install and try out, but found out that <a href=\"http://pygments.org/\">Pygments</a> was a dependency that I need to install first. I immediately tried to see if I could install it with <a href=\"http://mxcl.github.com/homebrew/\">Homebrew (the best package manager ever, for the Mac)</a>...</p>\n\n<pre><code>brew install pygments   #wont work\n</code></pre>\n\n<p>There is no Homebrew formula available to install it. After some searching, I found out that Pygments is one of Homebrew's formulas it won't accept. \"Why can't I install Pygments using Homebrew?\" I wondered. The reason is because Pygments is written in Python, and Python has its own package manager. This is sort of like how Ruby has RubyGems or PHP has, <em>shudder</em>, PEAR.</p>\n\n<p>Your Mac already came with Python installed, so you already have everything you need in order to install Pygments.</p>\n\n<pre><code>sudo easy_install Pygments\n</code></pre>\n\n<p>If you're wondering, <a href=\"http://packages.python.org/distribute/easy_install.html\"><code>easy_install</code></a> is a Python module used for managing Python packages.</p>\n","body_markdown":"Recently, I found a Ruby Gem that I wanted to install and try out, but found out that [Pygments][1] was a dependency that I need to install first. I immediately tried to see if I could install it with [Homebrew (the best package manager ever, for the Mac)][2]...\r\n\r\n    brew install pygments   #wont work\r\n\r\nThere is no Homebrew formula available to install it. After some searching, I found out that Pygments is one of Homebrew's formulas it won't accept. \"Why can't I install Pygments using Homebrew?\" I wondered. The reason is because Pygments is written in Python, and Python has its own package manager. This is sort of like how Ruby has RubyGems or PHP has, *shudder*, PEAR.\r\n\r\nYour Mac already came with Python installed, so you already have everything you need in order to install Pygments. \r\n\r\n    sudo easy_install Pygments\r\n\r\nIf you're wondering, [`easy_install`][3] is a Python module used for managing Python packages.\r\n\r\n[1]: http://pygments.org/\r\n[2]: http://mxcl.github.com/homebrew/\r\n[3]: http://packages.python.org/distribute/easy_install.html","created_at":"2012-07-19T18:27:45Z","excerpt":"Recently, I found a Ruby Gem that I want to install and try out, but found out that Pygments is a dependency that I need to install first. The install process turned out to be different than I expected. In this post, I explain how to install Pygments.","id":13,"published":true,"published_on":"2011-07-01","title":"How to install Pygments (syntax highlighter) using Homebrew","updated_at":"2012-07-19T18:27:45Z"},{"body_html":"<p>Finally! We can start testing our Controllers! I will assume that your application has the same directory structure as the Zend Framework Quick Start tutorial. Here\u2019s an overview of what our directory structure will look like:</p>\n<div class=\"highlight\"><pre>/myApp/application/controllers\n/myApp/tests/application/controllers\n</pre></div>\n\n<p>Our tests directory will mirror our application. We might also include a \u2018library\u2019 directory in the tests directory so we can test our custom library components. For now, we\u2019ll just keep it simple and test our controllers.</p>\n\n<p>Now, we\u2019ll create a file that will take care of auto loading. Create a new file called \u2018loader.php\u2019 in you tests directory. All of our tests will require this file.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">&lt;?php</span>\n\n<span class=\"nb\">define</span><span class=\"p\">(</span><span class=\"s1\">&#39;APPLICATION_PATH&#39;</span><span class=\"p\">,</span> <span class=\"nb\">realpath</span><span class=\"p\">(</span><span class=\"nb\">dirname</span><span class=\"p\">(</span><span class=\"k\">__FILE__</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">&#39;/../application/&#39;</span><span class=\"p\">));</span>\n\n<span class=\"nb\">set_include_path</span><span class=\"p\">(</span> <span class=\"nx\">APPLICATION_PATH</span> <span class=\"o\">.</span> <span class=\"s1\">&#39;/../library&#39;</span> <span class=\"o\">.</span> <span class=\"nx\">PATH_SEPARATOR</span> <span class=\"o\">.</span>\n<span class=\"nx\">APPLICATION_PATH</span> <span class=\"o\">.</span> <span class=\"s1\">&#39;/models&#39;</span> <span class=\"o\">.</span> <span class=\"nx\">PATH_SEPARATOR</span> <span class=\"o\">.</span>\n<span class=\"nx\">APPLICATION_PATH</span> <span class=\"o\">.</span> <span class=\"s1\">&#39;/forms&#39;</span> <span class=\"o\">.</span> <span class=\"nx\">PATH_SEPARATOR</span> <span class=\"o\">.</span>\n<span class=\"nb\">get_include_path</span><span class=\"p\">()</span> <span class=\"p\">);</span>\n\n<span class=\"k\">require_once</span> <span class=\"s2\">&quot;Zend/Loader.php&quot;</span><span class=\"p\">;</span>\n<span class=\"nx\">Zend_Loader</span><span class=\"o\">::</span><span class=\"na\">registerAutoload</span><span class=\"p\">();</span>\n</pre></div>\n\n<p>Now let\u2019s create a simple controller test. We\u2019ll call this <code>IndexControllerTest.php</code> and put it in our tests/application/controllers directory. We just need to set the location of our bootstrap file. When <code>Zend_Test_PHPUnit_ControllerTestCase</code> is constructed, it will look for the bootstrap file that we set here.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">&#39;../loader.php&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">IndexControllerTest</span> <span class=\"k\">extends</span> <span class=\"nx\">Zend_Test_PHPUnit_ControllerTestCase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nv\">$bootstrap</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;../../application/bootstrap.php&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"nf\">testIndexAction</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">dispatch</span><span class=\"p\">(</span><span class=\"s1\">&#39;/index&#39;</span><span class=\"p\">);</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">assertController</span><span class=\"p\">(</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">);</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">assertAction</span><span class=\"p\">(</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">);</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">assertResponseCode</span><span class=\"p\">(</span><span class=\"m\">200</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</pre></div>\n\n<p>That\u2019s it! All we have to do is run this file with our PHPUnit command line interface (that we used in the last tutorial).</p>\n","body_markdown":"Finally! We can start testing our Controllers! I will assume that your application has the same directory structure as the Zend Framework Quick Start tutorial. Here\u2019s an overview of what our directory structure will look like:\r\n\r\n```sh\r\n/myApp/application/controllers\r\n/myApp/tests/application/controllers\r\n```\r\n\r\nOur tests directory will mirror our application. We might also include a \u2018library\u2019 directory in the tests directory so we can test our custom library components. For now, we\u2019ll just keep it simple and test our controllers.\r\n\r\nNow, we\u2019ll create a file that will take care of auto loading. Create a new file called \u2018loader.php\u2019 in you tests directory. All of our tests will require this file.\r\n\r\n```php\r\n<?php\r\n \r\ndefine('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application/'));\r\n \r\nset_include_path( APPLICATION_PATH . '/../library' . PATH_SEPARATOR .\r\nAPPLICATION_PATH . '/models' . PATH_SEPARATOR .\r\nAPPLICATION_PATH . '/forms' . PATH_SEPARATOR .\r\nget_include_path() );\r\n \r\nrequire_once \"Zend/Loader.php\";\r\nZend_Loader::registerAutoload();\r\n```\r\n\r\nNow let\u2019s create a simple controller test. We\u2019ll call this `IndexControllerTest.php` and put it in our tests/application/controllers directory. We just need to set the location of our bootstrap file. When `Zend_Test_PHPUnit_ControllerTestCase` is constructed, it will look for the bootstrap file that we set here.\r\n\r\n```php\r\n<?php\r\n \r\nrequire_once '../loader.php';\r\n \r\nclass IndexControllerTest extends Zend_Test_PHPUnit_ControllerTestCase\r\n{\r\n    public $bootstrap = '../../application/bootstrap.php';\r\n \r\n    public function testIndexAction()\r\n    {\r\n        $this->dispatch('/index');\r\n        $this->assertController('index');\r\n        $this->assertAction('index');\r\n        $this->assertResponseCode(200);\r\n    }\r\n \r\n}\r\n```\r\n\r\nThat\u2019s it! All we have to do is run this file with our PHPUnit command line interface (that we used in the last tutorial).","created_at":"2012-07-19T18:23:50Z","excerpt":"","id":9,"published":true,"published_on":"2010-11-21","title":"Getting started with Zend_Test \u2013 Step 4: Testing your Zend Framework Controllers","updated_at":"2012-08-29T05:49:29Z"},{"body_html":"<p>Now that we\u2019ve installed PEAR and PHPUnit, we can verify that PHPUnit is working correctly by writing our first test.</p>\n\n<p>Since we installed PHPUnit through PEAR, and we have properly configured our include_path variable in our php.ini file, we can create our test files anywhere and PHP will know where to look to find PHPUnit. So I will create a new file in my /Users/andrew/Sites directory and call it FoobarTest.php with the following contents:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"idl\">&lt;?php</span>\n\n<span class=\"r\">class</span> <span class=\"cl\">FoobarTest</span> <span class=\"r\">extends</span> <span class=\"co\">PHPUnit_Framework_TestCase</span> {\n\n    <span class=\"r\">public</span> <span class=\"r\">function</span> <span class=\"fu\">testFoobar</span>() {\n        <span class=\"lv\">$this</span>-&gt;fail();\n    }\n}\n</pre></div>\n</div>\n\n\n<p>By writing our function name to start with \u201ctest\u201d, PHPUnit will know to run this function as a test. Typically you will want to name your test functions with names similar to the functions that you are testing, preceded by \u201ctest\u201d.</p>\n\n<p>Now let\u2019s run our test!</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\ncd /Users/andrew/Sites\nphpunit FoobarTest.php\n</pre></div>\n</div>\n\n\n<p>You should see something like the following:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nPHPUnit 3.3.15 by Sebastian Bergmann.\n\nF\n\nTime: 0 seconds\n\nThere was 1 failure:\n\n1) testFoobar(FoobarTest)\n/Users/andrew/Sites/FoobarTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1.\n</pre></div>\n</div>\n\n\n<p>Yay! It works! \u201cBut wait,\u201d you say, \u201cit says failures. Why is this a good thing?\u201d Test-driven development is all about writing tests first. Remember this saying: Red, Green, Refactor. Start by writing the test, which will fail, of course, because you haven\u2019t written any code yet! Then write the code until your test passes. Then STOP. There\u2019s no need to keep writing. The code is finished. You know it works because you have the test to prove it. Tests are written to fail. Code is written to fix the tests.</p>\n\n<p>However, this is a poor example of a test, so let\u2019s write a real one.</p>\n\n<p>Let\u2019s start by thinking about what we want to build. How about we build a class called Foobar (to make things easy since we already have a FoobarTest) that has a function called getMessage(). However, getMessage() doesn\u2019t return a string like we might expect, it returns an array. A test for that might look like the following. Also note that our function name is a little more verbose. Tests can serve as a sort of documentation. Think of underscores as commas and name your functions to explain what happens in the test.</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"idl\">&lt;?php</span>\n\n<span class=\"r\">class</span> <span class=\"cl\">FoobarTest</span> <span class=\"r\">extends</span> <span class=\"co\">PHPUnit_Framework_TestCase</span> {\n\n<span class=\"r\">public</span> <span class=\"r\">function</span> <span class=\"fu\">testGetMessage_ReturnsAnArray</span>() {\n<span class=\"lv\">$foobar</span> = <span class=\"r\">new</span> <span class=\"co\">Foobar</span>();\n<span class=\"lv\">$message</span> = <span class=\"lv\">$foobar</span>-&gt;getMessage();\n<span class=\"lv\">$this</span>-&gt;assertTrue(<span class=\"pd\">is_array</span>(<span class=\"lv\">$message</span>));\n}\n\n}\n</pre></div>\n</div>\n\n\n<p>Now if we run our test again, we should see the following:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nPHPUnit 3.3.15 by Sebastian Bergmann.\n\nPHP Fatal error:  Class 'Foobar' not found in /Users/andrew/Sites/FoobarTest.php on line 6\n\nFatal error: Class 'Foobar' not found in /Users/andrew/Sites/FoobarTest.php on line 6\n</pre></div>\n</div>\n\n\n<p>Now we have an error that says PHPUnit can\u2019t find our Foobar class. Well that\u2019s because we haven\u2019t created it yet! So create a new file in the same directory as our test, name it Foobar.php, and give it the following contents:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"idl\">&lt;?php</span>\n\n<span class=\"r\">class</span> <span class=\"cl\">Foobar</span> {\n\n}\n</pre></div>\n</div>\n\n\n<p>Next, let\u2019s update our test so it knows where to find our new class:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"idl\">&lt;?php</span>\n\n<span class=\"pd\">require_once</span>(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">Foobar.php</span><span class=\"dl\">'</span></span>);\n\n<span class=\"r\">class</span> <span class=\"cl\">FoobarTest</span> <span class=\"r\">extends</span> <span class=\"co\">PHPUnit_Framework_TestCase</span> {\n\n<span class=\"c\">//...</span>\n</pre></div>\n</div>\n\n\n<p>That\u2019s all we need to do. Remember, all we are trying to do is get the test to pass. Right now the test tells us that we need to create a Foobar class so that\u2019s what we\u2019ve done. Let\u2019s run our test again and see what it says.</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nPHPUnit 3.3.15 by Sebastian Bergmann.\n\nPHP Fatal error:  Call to undefined method Foobar::getMessage() in /Users/andrew/Sites/FoobarTest.php on line 9\n\nFatal error: Call to undefined method Foobar::getMessage() in /Users/andrew/Sites/FoobarTest.php on line 9\n</pre></div>\n</div>\n\n\n<p>Hooray! We no longer have the same message as before. Now we need to create our getMessage() function in our Foobar class.</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"idl\">&lt;?php</span>\n\n<span class=\"r\">class</span> <span class=\"cl\">Foobar</span> {\n\n<span class=\"r\">public</span> <span class=\"r\">function</span> <span class=\"fu\">getMessage</span>() {\n\n}\n\n}\n</pre></div>\n</div>\n\n\n<p>Run our test again and we should see another change:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nPHPUnit 3.3.15 by Sebastian Bergmann.\n\nF\n\nTime: 0 seconds\n\nThere was 1 failure:\n\n1) testGetMessage_ReturnsAnArray(FoobarTest)\nFailed asserting that &lt;boolean:false&gt; is true.\n/Users/andrew/Sites/FoobarTest.php:10\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n</pre></div>\n</div>\n\n\n<p>getMessage() doesn\u2019t return anything, so let\u2019s change that:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"idl\">&lt;?php</span>\n\n<span class=\"r\">class</span> <span class=\"cl\">Foobar</span> {\n\n<span class=\"r\">public</span> <span class=\"r\">function</span> <span class=\"fu\">getMessage</span>() {\n<span class=\"r\">return</span> <span class=\"pd\">array</span>();\n}\n\n}\n</pre></div>\n</div>\n\n\n<p>That should be enough for us to get our test to pass. Let\u2019s see if it works.</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nPHPUnit 3.3.15 by Sebastian Bergmann.\n\n.\n\nTime: 0 seconds\n\nOK (1 test, 1 assertion)\n</pre></div>\n</div>\n\n\n<p>It works! We\u2019re done. I think you get the picture. Let\u2019s move on to some actual controller tests.</p>\n","body_markdown":"Now that we\u2019ve installed PEAR and PHPUnit, we can verify that PHPUnit is working correctly by writing our first test.\r\n\r\nSince we installed PHPUnit through PEAR, and we have properly configured our include_path variable in our php.ini file, we can create our test files anywhere and PHP will know where to look to find PHPUnit. So I will create a new file in my /Users/andrew/Sites directory and call it FoobarTest.php with the following contents:\r\n\r\n<code lang=\"php\">\r\n<?php\r\n\r\nclass FoobarTest extends PHPUnit_Framework_TestCase {\r\n\r\n    public function testFoobar() {\r\n        $this->fail();\r\n    }\r\n}\r\n</code>\r\n\r\nBy writing our function name to start with \u201ctest\u201d, PHPUnit will know to run this function as a test. Typically you will want to name your test functions with names similar to the functions that you are testing, preceded by \u201ctest\u201d.\r\n\r\nNow let\u2019s run our test!\r\n\r\n<code>\r\ncd /Users/andrew/Sites\r\nphpunit FoobarTest.php\r\n</code>\r\n\r\nYou should see something like the following:\r\n\r\n<code>\r\nPHPUnit 3.3.15 by Sebastian Bergmann.\r\n\r\nF\r\n\r\nTime: 0 seconds\r\n\r\nThere was 1 failure:\r\n\r\n1) testFoobar(FoobarTest)\r\n/Users/andrew/Sites/FoobarTest.php:6\r\n\r\nFAILURES!\r\nTests: 1, Assertions: 0, Failures: 1.\r\n</code>\r\n\r\nYay! It works! \u201cBut wait,\u201d you say, \u201cit says failures. Why is this a good thing?\u201d Test-driven development is all about writing tests first. Remember this saying: Red, Green, Refactor. Start by writing the test, which will fail, of course, because you haven\u2019t written any code yet! Then write the code until your test passes. Then STOP. There\u2019s no need to keep writing. The code is finished. You know it works because you have the test to prove it. Tests are written to fail. Code is written to fix the tests.\r\n\r\nHowever, this is a poor example of a test, so let\u2019s write a real one.\r\n\r\nLet\u2019s start by thinking about what we want to build. How about we build a class called Foobar (to make things easy since we already have a FoobarTest) that has a function called getMessage(). However, getMessage() doesn\u2019t return a string like we might expect, it returns an array. A test for that might look like the following. Also note that our function name is a little more verbose. Tests can serve as a sort of documentation. Think of underscores as commas and name your functions to explain what happens in the test.\r\n\r\n<code lang=\"php\">\r\n<?php\r\n\r\nclass FoobarTest extends PHPUnit_Framework_TestCase {\r\n\r\npublic function testGetMessage_ReturnsAnArray() {\r\n$foobar = new Foobar();\r\n$message = $foobar->getMessage();\r\n$this->assertTrue(is_array($message));\r\n}\r\n\r\n}\r\n</code>\r\n\r\nNow if we run our test again, we should see the following:\r\n\r\n<code>\r\nPHPUnit 3.3.15 by Sebastian Bergmann.\r\n\r\nPHP Fatal error:  Class 'Foobar' not found in /Users/andrew/Sites/FoobarTest.php on line 6\r\n\r\nFatal error: Class 'Foobar' not found in /Users/andrew/Sites/FoobarTest.php on line 6\r\n</code>\r\n\r\nNow we have an error that says PHPUnit can\u2019t find our Foobar class. Well that\u2019s because we haven\u2019t created it yet! So create a new file in the same directory as our test, name it Foobar.php, and give it the following contents:\r\n\r\n<code lang=\"php\">\r\n<?php\r\n\r\nclass Foobar {\r\n\r\n}\r\n</code>\r\n\r\nNext, let\u2019s update our test so it knows where to find our new class:\r\n\r\n<code lang=\"php\">\r\n<?php\r\n\r\nrequire_once('Foobar.php');\r\n\r\nclass FoobarTest extends PHPUnit_Framework_TestCase {\r\n\r\n//...\r\n</code>\r\n\r\nThat\u2019s all we need to do. Remember, all we are trying to do is get the test to pass. Right now the test tells us that we need to create a Foobar class so that\u2019s what we\u2019ve done. Let\u2019s run our test again and see what it says.\r\n\r\n<code>\r\nPHPUnit 3.3.15 by Sebastian Bergmann.\r\n\r\nPHP Fatal error:  Call to undefined method Foobar::getMessage() in /Users/andrew/Sites/FoobarTest.php on line 9\r\n\r\nFatal error: Call to undefined method Foobar::getMessage() in /Users/andrew/Sites/FoobarTest.php on line 9\r\n</code>\r\n\r\nHooray! We no longer have the same message as before. Now we need to create our getMessage() function in our Foobar class.\r\n\r\n<code lang=\"php\">\r\n<?php\r\n\r\nclass Foobar {\r\n\r\npublic function getMessage() {\r\n\r\n}\r\n\r\n}\r\n</code>\r\n\r\nRun our test again and we should see another change:\r\n\r\n<code>\r\nPHPUnit 3.3.15 by Sebastian Bergmann.\r\n\r\nF\r\n\r\nTime: 0 seconds\r\n\r\nThere was 1 failure:\r\n\r\n1) testGetMessage_ReturnsAnArray(FoobarTest)\r\nFailed asserting that <boolean:false> is true.\r\n/Users/andrew/Sites/FoobarTest.php:10\r\n\r\nFAILURES!\r\nTests: 1, Assertions: 1, Failures: 1.\r\n</code>\r\n\r\ngetMessage() doesn\u2019t return anything, so let\u2019s change that:\r\n\r\n<code lang=\"php\">\r\n<?php\r\n\r\nclass Foobar {\r\n\r\npublic function getMessage() {\r\nreturn array();\r\n}\r\n\r\n}\r\n</code>\r\n\r\nThat should be enough for us to get our test to pass. Let\u2019s see if it works.\r\n\r\n<code>\r\nPHPUnit 3.3.15 by Sebastian Bergmann.\r\n\r\n.\r\n\r\nTime: 0 seconds\r\n\r\nOK (1 test, 1 assertion)\r\n</code>\r\n\r\nIt works! We\u2019re done. I think you get the picture. Let\u2019s move on to some actual controller tests.","created_at":"2012-07-19T18:23:23Z","excerpt":"","id":8,"published":true,"published_on":"2010-11-20","title":"Getting started with Zend_Test \u2013 Step 3: Make sure PHPUnit is ready for testing","updated_at":"2012-07-19T18:23:23Z"},{"body_html":"<p><strong>Question:</strong> How do I get started using Zend_Test? What is the process necessary to start using Zend_Test for testing my Zend Framework application?</p>\n\n<p><strong>Answer:</strong> Zend_Test extends PHPUnit. Therefore, we need to start by installing PHPUnit. The easiest way to install PHPUnit is by installing PEAR. If you\u2019ve compled step one in this series, you\u2019re all set! If you don\u2019t already have PEAR set up, you should go back and read Step one: setting up PEAR. You will soon see why PEAR makes PHPUnit so easy to install.</p>\n\n<p>So now that we have PEAR all ready to go, all we have to do is add the PHPUnit channel to PEAR\u2019s known channels. But first, let\u2019s start by switching to the super user, so we don\u2019t have to keep entering our password.</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nsudo su -\n</pre></div>\n</div>\n\n\n<p>Next, we tell PEAR to discover the PHPUnit channel:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nsudo pear channel-discover pear.phpunit.de\n</pre></div>\n</div>\n\n\n<p>Now all we have to do is tell pear to install PHPUnit, and we\u2019re done!</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\npear install phpunit/PHPUnit\n</pre></div>\n</div>\n\n\n\n","body_markdown":"**Question:** How do I get started using Zend_Test? What is the process necessary to start using Zend_Test for testing my Zend Framework application?\r\n\r\n**Answer:** Zend_Test extends PHPUnit. Therefore, we need to start by installing PHPUnit. The easiest way to install PHPUnit is by installing PEAR. If you\u2019ve compled step one in this series, you\u2019re all set! If you don\u2019t already have PEAR set up, you should go back and read Step one: setting up PEAR. You will soon see why PEAR makes PHPUnit so easy to install.\r\n\r\nSo now that we have PEAR all ready to go, all we have to do is add the PHPUnit channel to PEAR\u2019s known channels. But first, let\u2019s start by switching to the super user, so we don\u2019t have to keep entering our password.\r\n\r\n<code>\r\nsudo su -\r\n</code>\r\n\r\nNext, we tell PEAR to discover the PHPUnit channel:\r\n\r\n<code>\r\nsudo pear channel-discover pear.phpunit.de\r\n</code>\r\n\r\nNow all we have to do is tell pear to install PHPUnit, and we\u2019re done!\r\n\r\n<code>\r\npear install phpunit/PHPUnit\r\n</code>\r\n","created_at":"2012-07-19T18:22:50Z","excerpt":"The second step in getting ready to use Zend_Test is to install PHPUnit. In this article I show you how to install PHPUnit.","id":7,"published":true,"published_on":"2010-11-19","title":"Getting started with Zend_Test \u2013 Step 2: Setting up PHPUnit on Mac OS X 10.5 (Leopard)","updated_at":"2012-07-19T18:22:50Z"},{"body_html":"<p><strong>Question:</strong> How do I get started using Zend_Test? What is the process necessary to start using Zend_Test for testing my Zend Framework application?</p>\n\n<p><strong>Answer:</strong> Zend_Test extends PHPUnit. Therefore, we need to start by installing PHPUnit. The easiest way to install PHPUnit is by installing PEAR. Therefore\u2026you get the idea. We need PEAR. I\u2019ll walk you through the process I took to install PEAR on Mac OS X 10.5 (Leopard).</p>\n\n<p>Open up your trusty Terminal application by going to /Applications/Utilities.</p>\n\n<p>First, we\u2019ll switch over to a user that has enough permission to do anything, our super user:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nsudo su -\n</pre></div>\n</div>\n\n\n<p>Next, we\u2019ll change directories to /usr/local by typing:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\ncd /usr/local\n</pre></div>\n</div>\n\n\n<p>Then, we\u2019ll download and run the pear installer:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\ncurl http://pear.php.net/go-pear | php\n</pre></div>\n</div>\n\n\n<p>Press enter to begin the installation process. Press enter again to use no HTTP proxy. You should then see a screen with seven installation locations. The first one should say /usr/local. If this is not the case, press 1 and enter. Type /usr/local and press enter again. Now we should all be on the same page.</p>\n\n<p>Press enter to continue with the installation. When asked, you can accept the additional PEAR packages by typing Y and pressing enter.</p>\n\n<p>The installer will run through the installation, downloading and installing the necessary packages. Eventually the installation will finish. You may receive a warning that your php.ini file does not contain the PEAR PHP directory we specified (/usr/local/PEAR). This is okay. We will be editing this file in the next step. So simply type n and press enter. Press enter againto finish the installation. PEAR should now be installed and ready to use. Let\u2019s see if it works by typing:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\npear version\n</pre></div>\n</div>\n\n\n<p>We should see a few lines including the version of PEAR we just installed, PHP version, etc. But wait, we\u2019re not done yet! We still need to edit our php.ini file. If you don\u2019t have a php.ini, you\u2019ll need to create one by copying the php.ini.default:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\ncp /etc/php.ini.default /etc/php.ini\n</pre></div>\n</div>\n\n\n<p>Now were ready to edit our php.ini file. Open the file with Pico (or any other text editor):</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\npico /etc/php.ini\n</pre></div>\n</div>\n\n\n<p>Scroll down about 1/3 and find the line that says:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n;include_path = \u201c.:/php/includes\u201d\n</pre></div>\n</div>\n\n\n<p>The semicolon at the beginning of the line means it\u2019s commented out. Replace this line with the following:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\ninclude_path = \u201c.:/usr/local/PEAR\u201d\n</pre></div>\n</div>\n\n\n<p>Press Control + O, then enter, to save your changes. Then, Control + X to exit Pico. Restart your Apache server and you should be good to go!</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\napachectl restart\n</pre></div>\n</div>\n\n\n\n","body_markdown":"**Question:** How do I get started using Zend_Test? What is the process necessary to start using Zend_Test for testing my Zend Framework application?\r\n\r\n**Answer:** Zend_Test extends PHPUnit. Therefore, we need to start by installing PHPUnit. The easiest way to install PHPUnit is by installing PEAR. Therefore\u2026you get the idea. We need PEAR. I\u2019ll walk you through the process I took to install PEAR on Mac OS X 10.5 (Leopard).\r\n\r\nOpen up your trusty Terminal application by going to /Applications/Utilities.\r\n\r\nFirst, we\u2019ll switch over to a user that has enough permission to do anything, our super user:\r\n\r\n<code>\r\nsudo su -\r\n</code>\r\n\r\nNext, we\u2019ll change directories to /usr/local by typing:\r\n\r\n<code>\r\ncd /usr/local\r\n</code>\r\n\r\nThen, we\u2019ll download and run the pear installer:\r\n\r\n<code>\r\ncurl http://pear.php.net/go-pear | php\r\n</code>\r\n\r\nPress enter to begin the installation process. Press enter again to use no HTTP proxy. You should then see a screen with seven installation locations. The first one should say /usr/local. If this is not the case, press 1 and enter. Type /usr/local and press enter again. Now we should all be on the same page.\r\n\r\nPress enter to continue with the installation. When asked, you can accept the additional PEAR packages by typing Y and pressing enter.\r\n\r\nThe installer will run through the installation, downloading and installing the necessary packages. Eventually the installation will finish. You may receive a warning that your php.ini file does not contain the PEAR PHP directory we specified (/usr/local/PEAR). This is okay. We will be editing this file in the next step. So simply type n and press enter. Press enter againto finish the installation. PEAR should now be installed and ready to use. Let\u2019s see if it works by typing:\r\n\r\n<code>\r\npear version\r\n</code>\r\n\r\nWe should see a few lines including the version of PEAR we just installed, PHP version, etc. But wait, we\u2019re not done yet! We still need to edit our php.ini file. If you don\u2019t have a php.ini, you\u2019ll need to create one by copying the php.ini.default:\r\n\r\n<code>\r\ncp /etc/php.ini.default /etc/php.ini\r\n</code>\r\n\r\nNow were ready to edit our php.ini file. Open the file with Pico (or any other text editor):\r\n\r\n<code>\r\npico /etc/php.ini\r\n</code>\r\n\r\nScroll down about 1/3 and find the line that says:\r\n\r\n<code>\r\n;include_path = \u201c.:/php/includes\u201d\r\n</code>\r\n\r\nThe semicolon at the beginning of the line means it\u2019s commented out. Replace this line with the following:\r\n\r\n<code>\r\ninclude_path = \u201c.:/usr/local/PEAR\u201d\r\n</code>\r\n\r\n\r\nPress Control + O, then enter, to save your changes. Then, Control + X to exit Pico. Restart your Apache server and you should be good to go!\r\n\r\n<code>\r\napachectl restart\r\n</code>\r\n","created_at":"2012-07-19T18:21:49Z","excerpt":"","id":6,"published":true,"published_on":"2010-11-18","title":"Getting started with Zend_Test \u2013 Step 1: Setting up PEAR on Mac OS X 10.5 (Leopard)","updated_at":"2012-07-20T00:01:49Z"},{"body_html":"<p>Now that the Zend Framework ships with a command line tool, it\u2019s even easier to get started using the Zend Framework. In this tutorial, I will show you how to set up the command line tool for use on Mac OS X.</p>\n\n<p>First, <a href=\"http://framework.zend.com/download/latest\">download the newest version of the Zend Framework</a>. Both the full and minimal versions come with the Command Line tool. For this tutorial, I will be using version 1.9.3.</p>\n\n<p>Once the folder has downloaded, it will need to be extracted and moved somewhere you can find it. I will be moving this folder to the top level \u201c/Library/\u201d directory so it will be easy to type. Within the ZendFramework directory, there is a directory called bin. Within this directory is a file called zf.sh. This is the command line tool. So if you want to use the tool, open the Terminal application and navigate to the directory that you want your project created.</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\ncd Sites\n</pre></div>\n</div>\n\n\n<p>Then, type:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n/Library/ZendFramework/bin/zf.sh create project InsertProjectNameHere\n</pre></div>\n</div>\n\n\n<p>A new Zend Framework project will be created in the Sites directory with the name of InsertProjectNameHere. But this is more than I\u2019d rather type on a regular basis, so we should create an alias. To create an alias, type the following:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nalias zf=/Library/ZendFramework/bin/zf.sh\n</pre></div>\n</div>\n\n\n<p>Now all we have to type is:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\nzf create project MyApp\n</pre></div>\n</div>\n\n\n<p>That\u2019s it! By running this command in the command line, we have just created a new Zend Framework project in the current directory.</p>\n","body_markdown":"Now that the Zend Framework ships with a command line tool, it\u2019s even easier to get started using the Zend Framework. In this tutorial, I will show you how to set up the command line tool for use on Mac OS X.\r\n\r\nFirst, [download the newest version of the Zend Framework](http://framework.zend.com/download/latest). Both the full and minimal versions come with the Command Line tool. For this tutorial, I will be using version 1.9.3.\r\n\r\nOnce the folder has downloaded, it will need to be extracted and moved somewhere you can find it. I will be moving this folder to the top level \u201c/Library/\u201d directory so it will be easy to type. Within the ZendFramework directory, there is a directory called bin. Within this directory is a file called zf.sh. This is the command line tool. So if you want to use the tool, open the Terminal application and navigate to the directory that you want your project created.\r\n\r\n<code>\r\ncd Sites\r\n</code>\r\n\r\nThen, type:\r\n\r\n<code>\r\n/Library/ZendFramework/bin/zf.sh create project InsertProjectNameHere\r\n</code>\r\n\r\nA new Zend Framework project will be created in the Sites directory with the name of InsertProjectNameHere. But this is more than I\u2019d rather type on a regular basis, so we should create an alias. To create an alias, type the following:\r\n\r\n<code>\r\nalias zf=/Library/ZendFramework/bin/zf.sh\r\n</code>\r\n\r\nNow all we have to type is:\r\n\r\n<code>\r\nzf create project MyApp\r\n</code>\r\n\r\nThat\u2019s it! By running this command in the command line, we have just created a new Zend Framework project in the current directory.","created_at":"2012-07-19T18:21:05Z","excerpt":"","id":5,"published":true,"published_on":"2010-11-18","title":"How to set up the Zend Framework Command Line Tool on Mac OS X","updated_at":"2012-07-19T18:21:05Z"},{"body_html":"<p>I can never remember how to do this, so I&#39;m posting it here for future reference.</p>\n\n<p>This is how you can switch layout files in Zend Framework:</p>\n<div class=\"highlight\"><pre>// Within controller\n$this-&gt;_helper-&gt;_layout-&gt;setLayout(&#39;other-layout&#39;) //other-layout.phtml\n\n//Within view script\n&lt;?php $this-&gt;layout()-&gt;setLayout(&#39;other-layout&#39;); ?&gt;\n</pre></div>\n","body_markdown":"I can never remember how to do this, so I'm posting it here for future reference.\r\n\r\nThis is how you can switch layout files in Zend Framework:\r\n\r\n```text\r\n// Within controller\r\n$this->_helper->_layout->setLayout('other-layout') //other-layout.phtml\r\n\r\n//Within view script\r\n<?php $this->layout()->setLayout('other-layout'); ?>\r\n```","created_at":"2012-07-19T18:20:16Z","excerpt":"","id":4,"published":true,"published_on":"2010-11-18","title":"How to switch layout files in Zend Framework","updated_at":"2012-09-17T20:17:53Z"},{"body_html":"<p>I\u2019m in the process of trying to create a Zend Framework plugin, or helper that will add AJAX file upload capabilities to a Zend Form. It needs to degrade gracefully so that a user can still upload a file in case they have JavaScript (or Flash) disabled in their browser.</p>\n\n<p>Here\u2019s some plugins I\u2019ve found along the way that might help you:</p>\n\n<ul>\n<li><a href=\"http://www.phpletter.com/Our-Projects/AjaxFileUpload/\">PHP Letter: AJAX File Upload jQuery Plugin</a></li>\n<li><a href=\"http://valums.com/ajax-upload/\">Andrew Valums: AJAX Upload</a></li>\n<li><a href=\"http://jquery.malsup.com/form/\">jQuery Form Plugin</a> (includes AJAX file upload)</li>\n<li><a href=\"http://www.uploadify.com/\">Uploadify: multiple file upload plugin for jQuery</a></li>\n<li><a href=\"http://digitarald.de/project/fancyupload/\">Fancy Upload: MooTools AJAX file upload</a></li>\n<li><a href=\"http://swfupload.org/\">SWFUpload: JavaScript Flash AJAX file upload</a> (degrades gracefully to normal HTML upload form)</li>\n</ul>\n\n<p>If you have any experience (or success) with this, please share it in the comments.</p>\n\n<p>I\u2019ll post the solution when I am done.</p>\n","body_markdown":"I\u2019m in the process of trying to create a Zend Framework plugin, or helper that will add AJAX file upload capabilities to a Zend Form. It needs to degrade gracefully so that a user can still upload a file in case they have JavaScript (or Flash) disabled in their browser.\r\n\r\nHere\u2019s some plugins I\u2019ve found along the way that might help you:\r\n\r\n* [PHP Letter: AJAX File Upload jQuery Plugin](http://www.phpletter.com/Our-Projects/AjaxFileUpload/)\r\n* [Andrew Valums: AJAX Upload](http://valums.com/ajax-upload/)\r\n* [jQuery Form Plugin](http://jquery.malsup.com/form/) (includes AJAX file upload)\r\n* [Uploadify: multiple file upload plugin for jQuery](http://www.uploadify.com/)\r\n* [Fancy Upload: MooTools AJAX file upload](http://digitarald.de/project/fancyupload/)\r\n* [SWFUpload: JavaScript Flash AJAX file upload](http://swfupload.org/) (degrades gracefully to normal HTML upload form)\r\n\r\nIf you have any experience (or success) with this, please share it in the comments.\r\n\r\nI\u2019ll post the solution when I am done.","created_at":"2012-07-19T18:19:14Z","excerpt":"","id":3,"published":true,"published_on":"2010-11-18","title":"AJAX file upload with Zend Framework and jQuery","updated_at":"2012-09-17T20:17:07Z"},{"body_html":"<p>Files that start with a dot are considered hidden files in the finder window, which makes it difficult when you want to edit one of them (or make sure you have them!). Here\u2019s a great tutorial to set up a way to view those files in the finder window: <a href=\"http://theappleblog.com/2007/04/30/quick-tip-showhide-hidden-files/\">Quick Tip: Show/Hide Hidden Files</a>.</p>\n","body_markdown":"Files that start with a dot are considered hidden files in the finder window, which makes it difficult when you want to edit one of them (or make sure you have them!). Here\u2019s a great tutorial to set up a way to view those files in the finder window: [Quick Tip: Show/Hide Hidden Files](http://theappleblog.com/2007/04/30/quick-tip-showhide-hidden-files/).","created_at":"2012-07-19T18:25:41Z","excerpt":"","id":10,"published":true,"published_on":"2010-11-18","title":"How to get hidden files (like .htaccess) to show up in Mac OS X","updated_at":"2012-07-19T18:25:41Z"},{"body_html":"<p>I just found this tutorial on <a href=\"http://www.techfounder.net/2008/07/18/handling-mail-and-mime-in-php-using-the-zend-framework/\">Sending Emails with the Zend Framework</a>. This tutorial couldn\u2019t get any simpler, and explains the process of using Zend_Mail in plain English \u2013 much easier to read than the Zend documentation! It starts out simple, and gets advanced. Also includes lots of examples!</p>\n","body_markdown":"I just found this tutorial on [Sending Emails with the Zend Framework](http://www.techfounder.net/2008/07/18/handling-mail-and-mime-in-php-using-the-zend-framework/). This tutorial couldn\u2019t get any simpler, and explains the process of using Zend_Mail in plain English \u2013 much easier to read than the Zend documentation! It starts out simple, and gets advanced. Also includes lots of examples!","created_at":"2012-07-19T18:26:13Z","excerpt":"In this post, I share a tutorial I found that deals with sending emails using the Zend Framework.","id":11,"published":true,"published_on":"2010-11-18","title":"Getting started sending emails with the Zend Framework","updated_at":"2012-07-19T18:26:13Z"},{"body_html":"<p><strong>Question:</strong> How do I set up logging with FirePHP in Zend Framework?</p>\n\n<p><strong>Answer:</strong></p>\n\n<ul>\n<li>Step 1: Make sure you have Zend Framework 1.6+</li>\n<li>Step 2: Install both Firebug and FirePHP extensions for Firefox.</li>\n<li>Step 3: Make sure you have Console and Net enabled.</li>\n<li>Step 4: Set up Zend Log in your bootstrap file:</li>\n</ul>\n\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"lv\">$writer</span> = <span class=\"r\">new</span> <span class=\"co\">Zend_Log_Writer_Firebug</span>();\n<span class=\"lv\">$logger</span> = <span class=\"r\">new</span> <span class=\"co\">Zend_Log</span>(<span class=\"lv\">$writer</span>);\n</pre></div>\n</div>\n\n\n<p>You can now send a log message to Firebug with the following code (in your bootstrap file):</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"lv\">$logger</span>-&gt;<span class=\"pd\">log</span>(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">Hello World!</span><span class=\"dl\">'</span></span>, <span class=\"co\">Zend_Log</span>::<span class=\"co\">DEBUG</span>);\n</pre></div>\n</div>\n\n\n<p>If you wanted to use the logger outside of your bootstrap file, you can set $logger in the session:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"co\">Zend_Registry</span>::set(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">logger</span><span class=\"dl\">'</span></span>, <span class=\"lv\">$logger</span>);\n\n<span class=\"lv\">$logger</span> = <span class=\"co\">Zend_Registry</span>::get(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">logger</span><span class=\"dl\">'</span></span>);\n<span class=\"lv\">$logger</span>-&gt;<span class=\"pd\">log</span>(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">This is my log message</span><span class=\"dl\">'</span></span>, <span class=\"co\">Zend_Log</span>::<span class=\"co\">INFO</span>);\n</pre></div>\n</div>\n\n\n<p>However, when I want to debug, I don\u2019t want a bunch of lines or characters when I just want to output something to the logger. So I prefer to make a function in my bootstrap file that can be used throughout my application:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\n<span class=\"lv\">$writer</span> = <span class=\"r\">new</span> <span class=\"co\">Zend_Log_Writer_Firebug</span>();\n<span class=\"lv\">$logger</span> = <span class=\"r\">new</span> <span class=\"co\">Zend_Log</span>(<span class=\"lv\">$writer</span>);\n<span class=\"co\">Zend_Registry</span>::set(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">logger</span><span class=\"dl\">'</span></span>, <span class=\"lv\">$logger</span>);\n\n<span class=\"r\">function</span> <span class=\"fu\">debug</span>(<span class=\"lv\">$message</span>) {\n<span class=\"lv\">$logger</span> = <span class=\"co\">Zend_Registry</span>::get(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">logger</span><span class=\"dl\">'</span></span>);\n<span class=\"lv\">$logger</span>-&gt;debug(<span class=\"lv\">$message</span>);\n}\n</pre></div>\n</div>\n\n\n<p>That way, in my I can use by simply calling:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>\ndebug(<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">hello!</span><span class=\"dl\">'</span></span>);\n</pre></div>\n</div>\n\n\n\n","body_markdown":"**Question:** How do I set up logging with FirePHP in Zend Framework?\r\n\r\n**Answer:**\r\n\r\n* Step 1: Make sure you have Zend Framework 1.6+\r\n* Step 2: Install both Firebug and FirePHP extensions for Firefox.\r\n* Step 3: Make sure you have Console and Net enabled.\r\n* Step 4: Set up Zend Log in your bootstrap file:\r\n\r\n<code lang=\"php\">\r\n$writer = new Zend_Log_Writer_Firebug();\r\n$logger = new Zend_Log($writer);\r\n</code>\r\n\r\nYou can now send a log message to Firebug with the following code (in your bootstrap file):\r\n\r\n<code lang=\"php\">\r\n$logger->log('Hello World!', Zend_Log::DEBUG);\r\n</code>\r\n\r\nIf you wanted to use the logger outside of your bootstrap file, you can set $logger in the session:\r\n\r\n<code lang=\"php\">\r\nZend_Registry::set('logger', $logger);\r\n\r\n$logger = Zend_Registry::get('logger');\r\n$logger->log('This is my log message', Zend_Log::INFO);\r\n</code>\r\n\r\nHowever, when I want to debug, I don\u2019t want a bunch of lines or characters when I just want to output something to the logger. So I prefer to make a function in my bootstrap file that can be used throughout my application:\r\n\r\n<code lang=\"php\">\r\n$writer = new Zend_Log_Writer_Firebug();\r\n$logger = new Zend_Log($writer);\r\nZend_Registry::set('logger', $logger);\r\n\r\nfunction debug($message) {\r\n$logger = Zend_Registry::get('logger');\r\n$logger->debug($message);\r\n}\r\n</code>\r\n\r\nThat way, in my I can use by simply calling:\r\n\r\n<code lang=\"php\">\r\ndebug('hello!');\r\n</code>\r\n","created_at":"2012-07-19T05:25:24Z","excerpt":"","id":1,"published":true,"published_on":"2010-11-18","title":"Setting up logging with Firebug and FirePHP in Zend Framework 1.7.5","updated_at":"2012-07-19T05:25:24Z"}]